Index: src/main/kotlin/projet/echecmartien/modele/PetitPion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\nclass PetitPion : Pion() {\r\n\r\n    override fun getScore(): Int {\r\n        return 1\r\n    }\r\n\r\n    override fun getDeplacement(deplacement: Deplacement): List<Coordonnee> {\r\n        if (!deplacement.estDiagonal() || deplacement.longueur()!=1)\r\n            throw DeplacementExeption(\"Déplacement illégal\")\r\n        return deplacement.getCheminDiagonal()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/PetitPion.kt b/src/main/kotlin/projet/echecmartien/modele/PetitPion.kt
--- a/src/main/kotlin/projet/echecmartien/modele/PetitPion.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/PetitPion.kt	(date 1654758491644)
@@ -9,7 +9,7 @@
     }
 
     override fun getDeplacement(deplacement: Deplacement): List<Coordonnee> {
-        if (!deplacement.estDiagonal() || deplacement.longueur()!=1)
+        if (!deplacement.estDiagonal() || deplacement.longueur() != 1)
             throw DeplacementExeption("Déplacement illégal")
         return deplacement.getCheminDiagonal()
     }
Index: src/main/kotlin/projet/echecmartien/modele/Pion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\n\r\n/**\r\n * Classe Pion\r\n */\r\n abstract class Pion {\r\n\t/**\r\n\t * récupère la valeur du score d'un pion\r\n\t * @return la valeur du score\r\n\t */\r\n\tabstract fun getScore():Int\r\n\r\n\r\n\t/**\r\n\t * donne le chemin de coordonnées que constitue le déplacement\r\n\t * du point de départ vers le point d'arrivée. Les déplacements autorisés sont horizontaux, verticaux, diagonaux.\r\n\t *\r\n\t * @param deplacement le déplacement\r\n\t * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée.\r\n\t * La liste ne contient pas les coordonnées du point de départ.\r\n\t *\r\n\t * @throws DeplacementException est levée si le déplacement n'est pas possible\r\n\t */\r\n\tabstract fun getDeplacement(deplacement: Deplacement):List<Coordonnee>\r\n\r\n\toverride fun toString(): String {\r\n\t\treturn getScore().toString()\r\n\t}\r\n\r\n\toverride fun equals(other: Any?): Boolean {\r\n\t\tif (other !is Pion)\r\n\t\t\treturn false\r\n\t\treturn getScore().equals(other.getScore())\r\n\t}\r\n   }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Pion.kt b/src/main/kotlin/projet/echecmartien/modele/Pion.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Pion.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Pion.kt	(date 1654758491614)
@@ -4,33 +4,33 @@
 /**
  * Classe Pion
  */
- abstract class Pion {
-	/**
-	 * récupère la valeur du score d'un pion
-	 * @return la valeur du score
-	 */
-	abstract fun getScore():Int
+abstract class Pion {
+    /**
+     * récupère la valeur du score d'un pion
+     * @return la valeur du score
+     */
+    abstract fun getScore(): Int
 
 
-	/**
-	 * donne le chemin de coordonnées que constitue le déplacement
-	 * du point de départ vers le point d'arrivée. Les déplacements autorisés sont horizontaux, verticaux, diagonaux.
-	 *
-	 * @param deplacement le déplacement
-	 * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée.
-	 * La liste ne contient pas les coordonnées du point de départ.
-	 *
-	 * @throws DeplacementException est levée si le déplacement n'est pas possible
-	 */
-	abstract fun getDeplacement(deplacement: Deplacement):List<Coordonnee>
+    /**
+     * donne le chemin de coordonnées que constitue le déplacement
+     * du point de départ vers le point d'arrivée. Les déplacements autorisés sont horizontaux, verticaux, diagonaux.
+     *
+     * @param deplacement le déplacement
+     * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée.
+     * La liste ne contient pas les coordonnées du point de départ.
+     *
+     * @throws DeplacementException est levée si le déplacement n'est pas possible
+     */
+    abstract fun getDeplacement(deplacement: Deplacement): List<Coordonnee>
 
-	override fun toString(): String {
-		return getScore().toString()
-	}
+    override fun toString(): String {
+        return getScore().toString()
+    }
 
-	override fun equals(other: Any?): Boolean {
-		if (other !is Pion)
-			return false
-		return getScore().equals(other.getScore())
-	}
-   }
\ No newline at end of file
+    override fun equals(other: Any?): Boolean {
+        if (other !is Pion)
+            return false
+        return getScore().equals(other.getScore())
+    }
+}
\ No newline at end of file
Index: src/main/kotlin/projet/echecmartien/modele/Plateau.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport projet.echecmartien.librairie.GeneralData\r\nimport projet.echecmartien.librairie.TAILLEHORIZONTALE\r\nimport projet.echecmartien.librairie.TAILLEVERTICALE\r\n\r\n\r\nclass Plateau {\r\n    private val tailleHorizontale : Int = TAILLEHORIZONTALE\r\n    private val tailleVerticale : Int = TAILLEVERTICALE\r\n    private val cases : Array<Array<Case>> = Array(tailleHorizontale){ Array(tailleVerticale){Case()}}\r\n\r\n\r\n\r\n    /**\r\n     * initialise le plateau de jeu avec les pions\r\n     */\r\n    fun initialiser() {\r\n        val t = GeneralData().tableau\r\n        for (i in t.indices){\r\n            for (j in t[i].indices){\r\n                when (t[i][j].valeur) {\r\n                    \"G\" -> cases[i][j].setPion(GrandPion())\r\n                    \"M\" -> cases[i][j].setPion(MoyenPion())\r\n                    \"P\" -> cases[i][j].setPion(PetitPion())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * donne la taille horizontale du plateau\r\n     * @return la taille horizontale du plateau\r\n     */\r\n    fun getTailleHorizontale(): Int {\r\n        return tailleHorizontale\r\n    }\r\n\r\n\r\n    /**\r\n     * donne la taille verticale du plateau\r\n     * @return la taille verticale du plateau\r\n     */\r\n    fun getTailleVerticale(): Int {\r\n       return tailleVerticale\r\n    }\r\n\r\n\r\n    /**\r\n     * donne le tableau des cases du plateau\r\n     * @return les cases du plateau\r\n     */\r\n    fun getCases(): Array<Array<Case>> {\r\n        return cases\r\n    }\r\n\r\n    override fun toString(): String {\r\n        var s = \"\"\r\n        for (colonne in cases[0].indices){\r\n            for (c in cases.indices){\r\n                if (cases[c][colonne].getPion() == null) {\r\n                    s += \"0|\"\r\n                }\r\n                else {\r\n                    s += cases[c][colonne].getPion().toString() + \"|\"\r\n                }\r\n            }\r\n            s += \"\\n\"\r\n        }\r\n        return s\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Plateau.kt b/src/main/kotlin/projet/echecmartien/modele/Plateau.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Plateau.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Plateau.kt	(date 1654758491621)
@@ -6,19 +6,18 @@
 
 
 class Plateau {
-    private val tailleHorizontale : Int = TAILLEHORIZONTALE
-    private val tailleVerticale : Int = TAILLEVERTICALE
-    private val cases : Array<Array<Case>> = Array(tailleHorizontale){ Array(tailleVerticale){Case()}}
+    private val tailleHorizontale: Int = TAILLEHORIZONTALE
+    private val tailleVerticale: Int = TAILLEVERTICALE
+    private val cases: Array<Array<Case>> = Array(tailleHorizontale) { Array(tailleVerticale) { Case() } }
 
 
-
     /**
      * initialise le plateau de jeu avec les pions
      */
     fun initialiser() {
         val t = GeneralData().tableau
-        for (i in t.indices){
-            for (j in t[i].indices){
+        for (i in t.indices) {
+            for (j in t[i].indices) {
                 when (t[i][j].valeur) {
                     "G" -> cases[i][j].setPion(GrandPion())
                     "M" -> cases[i][j].setPion(MoyenPion())
@@ -29,7 +28,6 @@
     }
 
 
-
     /**
      * donne la taille horizontale du plateau
      * @return la taille horizontale du plateau
@@ -44,7 +42,7 @@
      * @return la taille verticale du plateau
      */
     fun getTailleVerticale(): Int {
-       return tailleVerticale
+        return tailleVerticale
     }
 
 
@@ -58,12 +56,11 @@
 
     override fun toString(): String {
         var s = ""
-        for (colonne in cases[0].indices){
-            for (c in cases.indices){
+        for (colonne in cases[0].indices) {
+            for (c in cases.indices) {
                 if (cases[c][colonne].getPion() == null) {
                     s += "0|"
-                }
-                else {
+                } else {
                     s += cases[c][colonne].getPion().toString() + "|"
                 }
             }
Index: src/main/kotlin/projet/echecmartien/modele/InterfaceJeu.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\n\r\n\r\ninterface InterfaceJeu {\r\n    /**\r\n     * initialise la partie\r\n     * @param joueur1 le premier joueur\r\n     * @param joueur2 le second joueur\r\n     * @param nombreCoupsSansPriseMax utilisé pour arrêter le jeu\r\n     */\r\n    fun initialiserPartie(joueur1: Joueur, joueur2: Joueur, nombreCoupsSansPriseMax: Int)\r\n\r\n    /**\r\n     * teste si le pion dont on passe en paramètre les coordonnées est éligible à un déplacement\r\n     * @param coordOrigineX la coordonnee x du pion\r\n     * @param coordOrigineY la coordonnee y du pion\r\n     *@return true si le pion peut se déplacer, false sinon\r\n     */\r\n    fun deplacementPossible(coordOrigineX: Int,\r\n                            coordOrigineY: Int    ): Boolean\r\n\r\n\r\n\r\n    /**\r\n     * Teste les préconditions relatives au déplacement d'un pion dans la grille de jeu <br></br>\r\n     *\r\n     *\r\n     * @param coordOrigineX coordonnée horizontale du point de départ\r\n     * @param coordOrigineY coordonnée verticale du point de départ\r\n     * @param coordDestinationX coordonnée horizontale du point d'arrivée\r\n     * @param coordDestinationY coordonnée verticale du point d'arrivée\r\n     * @param joueur le joueur qui demande le déplacement\r\n     * @return true si les préconditions de déplacement sont vérifiées\r\n     * @throws DeplacementException si le déplacement n'est pas possible\r\n     */\r\n    fun deplacementPossible(\r\n        coordOrigineX: Int,\r\n        coordOrigineY: Int, coordDestinationX: Int, coordDestinationY: Int,\r\n        joueur: Joueur?\r\n    ): Boolean\r\n\r\n    /**\r\n     * Effectue le déplacement d'un pion en modifiant ses coordonnées (coordonnées de départ) qui prennent pour valeur les coordonnées d'arrivée. <br></br>Si un pion adverse a pour coordonnées, les coordonnées d'arrivée du pion déplacé alors il est capturé.\r\n     * <br></br>préconditions: le déplacement est potentiellement possible dans la grille de jeu\r\n     *\r\n     * @param coordOrigineX\r\n     * la coordonnée horizontale de la case dont le joueur veut\r\n     * déplacer le pion\r\n     * @param coordOrigineY\r\n     * la coordonnée verticale de la case dont le joueur veut déplacer le pion\r\n     * @param coordDestinationX\r\n     * la coordonnée horizontale de la case où le joueur veut déplacer le pion\r\n     * @param coordDestinationY\r\n     * la coordonnée verticale de la case où le joueur veut déplacer le pion\r\n     *\r\n     *\r\n     */\r\n    fun deplacer(\r\n        coordOrigineX: Int, coordOrigineY: Int,\r\n        coordDestinationX: Int, coordDestinationY: Int\r\n    )\r\n    /**\r\n     * donne le joueur gagnant\r\n     *\r\n     * @return le joueur gagnant ou null si les 2 joueurs sont ex aequo\r\n     */\r\n    fun joueurVainqueur(): Joueur?\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/InterfaceJeu.kt b/src/main/kotlin/projet/echecmartien/modele/InterfaceJeu.kt
--- a/src/main/kotlin/projet/echecmartien/modele/InterfaceJeu.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/InterfaceJeu.kt	(date 1654758491670)
@@ -1,7 +1,6 @@
 package projet.echecmartien.modele
 
 
-
 interface InterfaceJeu {
     /**
      * initialise la partie
@@ -17,9 +16,10 @@
      * @param coordOrigineY la coordonnee y du pion
      *@return true si le pion peut se déplacer, false sinon
      */
-    fun deplacementPossible(coordOrigineX: Int,
-                            coordOrigineY: Int    ): Boolean
-
+    fun deplacementPossible(
+        coordOrigineX: Int,
+        coordOrigineY: Int
+    ): Boolean
 
 
     /**
@@ -60,6 +60,7 @@
         coordOrigineX: Int, coordOrigineY: Int,
         coordDestinationX: Int, coordDestinationY: Int
     )
+
     /**
      * donne le joueur gagnant
      *
Index: src/main/kotlin/projet/echecmartien/modele/Jeu.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\n\r\nclass Jeu : InterfaceJeu{\r\n    private var nombreCoupsSansPrise : Int = 0\r\n    private var nombreCoupsSansPriseMax : Int = 0\r\n    private var coordOrigine : Coordonnee? = null\r\n    private var coordDest : Coordonnee? = null\r\n    private var joueurs : Array<Joueur> = arrayOf()\r\n    private var joueurCourant : Joueur? = null\r\n    private var plateau : Plateau = Plateau()\r\n    private var pionArriveDeZone : Pion? = null\r\n\r\n    /**\r\n    * getter\r\n    * @return le plateau\r\n    * */\r\n    fun getPlateau() = plateau\r\n\r\n\r\n    /**\r\n     * getter\r\n     * @return la coordonnée origine du déplacement\r\n     */\r\n    fun getCoordOrigineDeplacement(): Coordonnee?{\r\n       return coordOrigine\r\n    }\r\n    /**\r\n     * getter\r\n     * @return la coordonnée destination du déplacement\r\n     */\r\n    fun getCoordDestinationDeplacement(): Coordonnee?{\r\n        return coordDest\r\n    }\r\n\r\n\r\n    /**\r\n     * setter\r\n     * @param origine la coordonnée origine du déplacement\r\n     */\r\n    fun setCoordOrigineDeplacement(origine: Coordonnee){\r\n       coordOrigine=origine\r\n    }\r\n\r\n\r\n    /**\r\n     * setter\r\n     * @param destination la coordonnée destination du déplacement\r\n     */\r\n    fun setCoordDestinationDeplacement(destination: Coordonnee){\r\n        coordDest=destination\r\n    }\r\n\r\n\r\n    /** retourne le joueur courant\r\n     * @return le joueur courant\r\n     */\r\n    fun getJoueurCourant(): Joueur? {\r\n       return joueurCourant\r\n    }\r\n\r\n\r\n/**\r\n     * affectation des joueurs aux cases\r\n     * @param joueur1 premier joueur\r\n     * @paral joueur2 second joueur\r\n     */\r\n    private fun initialiserJoueur(joueur1: Joueur, joueur2: Joueur) {\r\n        for (i in 0 until plateau.getTailleVerticale()){\r\n            for (j in 0 until plateau.getTailleHorizontale()){\r\n                if (i<4){\r\n                    plateau.getCases()[j][i].setJoueur(joueur2)\r\n                }\r\n                else{\r\n                    plateau.getCases()[j][i].setJoueur(joueur1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * permet de savoir si la partie est finie ou non\r\n     * @return true si la partie est finie, false sinon\r\n     */\r\n    fun arretPartie(): Boolean {\r\n        var cptj1 = 0\r\n        var cptj2 = 0\r\n        for (i in 0 until plateau.getTailleVerticale()){\r\n            for (j in 0 until plateau.getTailleHorizontale()){\r\n                if (i<4 && plateau.getCases()[j][i].getPion()!=null){\r\n                    cptj2++\r\n                }\r\n                if (i>=4 && plateau.getCases()[j][i].getPion()!=null) {\r\n                    cptj1++\r\n                }\r\n            }\r\n        }\r\n        if (cptj1==0 || cptj2==0)\r\n            return true\r\n       return nombreCoupsSansPriseMax==nombreCoupsSansPrise\r\n    }\r\n\r\n    /**\r\n     * modifie le joueur courant\r\n     *\r\n     */\r\n    fun changeJoueurCourant() {\r\n        if (joueurCourant==joueurs[0]){\r\n            joueurCourant=joueurs[1]\r\n        }\r\n        else{\r\n            joueurCourant=joueurs[0]\r\n        }\r\n    }\r\n\r\n    override fun initialiserPartie(joueur1: Joueur, joueur2: Joueur, nombreCoupsSansPriseMax: Int) {\r\n        initialiserJoueur(joueur1,joueur2)\r\n        joueurs= arrayOf(joueur1,joueur2)\r\n        joueurCourant=joueur1\r\n        plateau.initialiser()\r\n        this.nombreCoupsSansPriseMax=nombreCoupsSansPriseMax\r\n    }\r\n\r\n\r\n    override fun joueurVainqueur(): Joueur? {\r\n        if (joueurs[0].calculerScore()>joueurs[1].calculerScore())\r\n            return joueurs[0]\r\n        if (joueurs[0].calculerScore()<joueurs[1].calculerScore())\r\n            return joueurs[1]\r\n        return null\r\n    }\r\n\r\n    override fun deplacementPossible(coordOrigineX: Int, coordOrigineY: Int): Boolean {\r\n        if (coordOrigineX<0 || coordOrigineX >= plateau.getTailleHorizontale() || coordOrigineY<0 || coordOrigineY>= plateau.getTailleVerticale())\r\n            return false\r\n        val c = plateau.getCases()[coordOrigineX][coordOrigineY]\r\n        if (c.getJoueur()!=joueurCourant)\r\n            return false\r\n        if (c.getPion() != null){ // test de tous les Pions\r\n            if (coordOrigineX+1 < plateau.getTailleHorizontale() && coordOrigineY+1 < plateau.getTailleVerticale()){\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY+1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineX+1 < plateau.getTailleHorizontale() && coordOrigineY-1>=0){\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY-1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineX-1 >= 0 && coordOrigineY+1 < plateau.getTailleVerticale()){\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY+1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineX-1 >=0 && coordOrigineY-1 >= 0){\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY-1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n        }\r\n\r\n        if (c.getPion() is GrandPion || c.getPion() is MoyenPion){ //test du Moyen et Grand Pion\r\n            if (coordOrigineX+1 < plateau.getTailleHorizontale()){\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX+1][coordOrigineY].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineX-1 >=0){\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX-1][coordOrigineY].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineY+1 < plateau.getTailleVerticale()){\r\n                if (plateau.getCases()[coordOrigineX][coordOrigineY+1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n            if (coordOrigineY-1 >=0){\r\n                if (plateau.getCases()[coordOrigineX][coordOrigineY-1].estLibre())\r\n                    return true\r\n                if (plateau.getCases()[coordOrigineX][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun deplacementPossible(\r\n        coordOrigineX: Int,\r\n        coordOrigineY: Int,\r\n        coordDestinationX: Int,\r\n        coordDestinationY: Int,\r\n        joueur: Joueur?\r\n    ): Boolean {\r\n        if (joueur!=joueurCourant)\r\n            return false\r\n        if (!deplacementPossible(coordOrigineX,coordOrigineY))\r\n            return false\r\n        val d = Deplacement(Coordonnee(coordOrigineX,coordOrigineY),\r\n            Coordonnee(coordDestinationX,coordDestinationY)\r\n        )\r\n        val co = plateau.getCases()[coordOrigineX][coordOrigineY]\r\n        val cd = plateau.getCases()[coordDestinationX][coordDestinationY]\r\n        if (co.getJoueur()!=cd.getJoueur() && co.getPion()===pionArriveDeZone)\r\n            return false\r\n        val chemin : List<Coordonnee>\r\n        try {\r\n            chemin = co.getPion()!!.getDeplacement(d)\r\n        }\r\n        catch (e : DeplacementExeption){\r\n            return false\r\n        }\r\n        for (i in 0 until chemin.size-1){\r\n            if (!plateau.getCases()[chemin[i].getX()][chemin[i].getY()].estLibre())\r\n                return false\r\n        }\r\n        if (cd.getJoueur()==joueurCourant && !cd.estLibre())\r\n            return false\r\n        return true\r\n    }\r\n\r\n\r\n    override fun deplacer(coordOrigineX: Int, coordOrigineY: Int, coordDestinationX: Int, coordDestinationY: Int) {\r\n        val co = plateau.getCases()[coordOrigineX][coordOrigineY]\r\n        val cd = plateau.getCases()[coordDestinationX][coordDestinationY]\r\n        if (deplacementPossible(coordOrigineX,coordOrigineY,coordDestinationX,coordDestinationY,joueurCourant)){\r\n            nombreCoupsSansPrise += 1\r\n            if (!cd.estLibre() && cd.getJoueur()!=joueurCourant) {\r\n                joueurCourant!!.ajouterPionCaptures(cd.getPion()!!)\r\n                nombreCoupsSansPrise = 0\r\n            }\r\n            if (cd.getJoueur() != co.getJoueur()){\r\n                pionArriveDeZone=co.getPion()\r\n            }\r\n            plateau.getCases()[coordDestinationX][coordDestinationY].setPion(co.getPion())\r\n            plateau.getCases()[coordOrigineX][coordOrigineY].setPion(null)\r\n            changeJoueurCourant()\r\n        }\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return plateau.toString()\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Jeu.kt b/src/main/kotlin/projet/echecmartien/modele/Jeu.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Jeu.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Jeu.kt	(date 1654758491689)
@@ -3,20 +3,20 @@
 import projet.echecmartien.exeptions.DeplacementExeption
 
 
-class Jeu : InterfaceJeu{
-    private var nombreCoupsSansPrise : Int = 0
-    private var nombreCoupsSansPriseMax : Int = 0
-    private var coordOrigine : Coordonnee? = null
-    private var coordDest : Coordonnee? = null
-    private var joueurs : Array<Joueur> = arrayOf()
-    private var joueurCourant : Joueur? = null
-    private var plateau : Plateau = Plateau()
-    private var pionArriveDeZone : Pion? = null
+class Jeu : InterfaceJeu {
+    private var nombreCoupsSansPrise: Int = 0
+    private var nombreCoupsSansPriseMax: Int = 0
+    private var coordOrigine: Coordonnee? = null
+    private var coordDest: Coordonnee? = null
+    private var joueurs: Array<Joueur> = arrayOf()
+    private var joueurCourant: Joueur? = null
+    private var plateau: Plateau = Plateau()
+    private var pionArriveDeZone: Pion? = null
 
     /**
-    * getter
-    * @return le plateau
-    * */
+     * getter
+     * @return le plateau
+     * */
     fun getPlateau() = plateau
 
 
@@ -24,14 +24,15 @@
      * getter
      * @return la coordonnée origine du déplacement
      */
-    fun getCoordOrigineDeplacement(): Coordonnee?{
-       return coordOrigine
+    fun getCoordOrigineDeplacement(): Coordonnee? {
+        return coordOrigine
     }
+
     /**
      * getter
      * @return la coordonnée destination du déplacement
      */
-    fun getCoordDestinationDeplacement(): Coordonnee?{
+    fun getCoordDestinationDeplacement(): Coordonnee? {
         return coordDest
     }
 
@@ -40,8 +41,8 @@
      * setter
      * @param origine la coordonnée origine du déplacement
      */
-    fun setCoordOrigineDeplacement(origine: Coordonnee){
-       coordOrigine=origine
+    fun setCoordOrigineDeplacement(origine: Coordonnee) {
+        coordOrigine = origine
     }
 
 
@@ -49,8 +50,8 @@
      * setter
      * @param destination la coordonnée destination du déplacement
      */
-    fun setCoordDestinationDeplacement(destination: Coordonnee){
-        coordDest=destination
+    fun setCoordDestinationDeplacement(destination: Coordonnee) {
+        coordDest = destination
     }
 
 
@@ -58,22 +59,21 @@
      * @return le joueur courant
      */
     fun getJoueurCourant(): Joueur? {
-       return joueurCourant
+        return joueurCourant
     }
 
 
-/**
+    /**
      * affectation des joueurs aux cases
      * @param joueur1 premier joueur
      * @paral joueur2 second joueur
      */
     private fun initialiserJoueur(joueur1: Joueur, joueur2: Joueur) {
-        for (i in 0 until plateau.getTailleVerticale()){
-            for (j in 0 until plateau.getTailleHorizontale()){
-                if (i<4){
+        for (i in 0 until plateau.getTailleVerticale()) {
+            for (j in 0 until plateau.getTailleHorizontale()) {
+                if (i < 4) {
                     plateau.getCases()[j][i].setJoueur(joueur2)
-                }
-                else{
+                } else {
                     plateau.getCases()[j][i].setJoueur(joueur1)
                 }
             }
@@ -87,19 +87,19 @@
     fun arretPartie(): Boolean {
         var cptj1 = 0
         var cptj2 = 0
-        for (i in 0 until plateau.getTailleVerticale()){
-            for (j in 0 until plateau.getTailleHorizontale()){
-                if (i<4 && plateau.getCases()[j][i].getPion()!=null){
+        for (i in 0 until plateau.getTailleVerticale()) {
+            for (j in 0 until plateau.getTailleHorizontale()) {
+                if (i < 4 && plateau.getCases()[j][i].getPion() != null) {
                     cptj2++
                 }
-                if (i>=4 && plateau.getCases()[j][i].getPion()!=null) {
+                if (i >= 4 && plateau.getCases()[j][i].getPion() != null) {
                     cptj1++
                 }
             }
         }
-        if (cptj1==0 || cptj2==0)
+        if (cptj1 == 0 || cptj2 == 0)
             return true
-       return nombreCoupsSansPriseMax==nombreCoupsSansPrise
+        return nombreCoupsSansPriseMax == nombreCoupsSansPrise
     }
 
     /**
@@ -107,87 +107,86 @@
      *
      */
     fun changeJoueurCourant() {
-        if (joueurCourant==joueurs[0]){
-            joueurCourant=joueurs[1]
-        }
-        else{
-            joueurCourant=joueurs[0]
+        if (joueurCourant == joueurs[0]) {
+            joueurCourant = joueurs[1]
+        } else {
+            joueurCourant = joueurs[0]
         }
     }
 
     override fun initialiserPartie(joueur1: Joueur, joueur2: Joueur, nombreCoupsSansPriseMax: Int) {
-        initialiserJoueur(joueur1,joueur2)
-        joueurs= arrayOf(joueur1,joueur2)
-        joueurCourant=joueur1
+        initialiserJoueur(joueur1, joueur2)
+        joueurs = arrayOf(joueur1, joueur2)
+        joueurCourant = joueur1
         plateau.initialiser()
-        this.nombreCoupsSansPriseMax=nombreCoupsSansPriseMax
+        this.nombreCoupsSansPriseMax = nombreCoupsSansPriseMax
     }
 
 
     override fun joueurVainqueur(): Joueur? {
-        if (joueurs[0].calculerScore()>joueurs[1].calculerScore())
+        if (joueurs[0].calculerScore() > joueurs[1].calculerScore())
             return joueurs[0]
-        if (joueurs[0].calculerScore()<joueurs[1].calculerScore())
+        if (joueurs[0].calculerScore() < joueurs[1].calculerScore())
             return joueurs[1]
         return null
     }
 
     override fun deplacementPossible(coordOrigineX: Int, coordOrigineY: Int): Boolean {
-        if (coordOrigineX<0 || coordOrigineX >= plateau.getTailleHorizontale() || coordOrigineY<0 || coordOrigineY>= plateau.getTailleVerticale())
+        if (coordOrigineX < 0 || coordOrigineX >= plateau.getTailleHorizontale() || coordOrigineY < 0 || coordOrigineY >= plateau.getTailleVerticale())
             return false
         val c = plateau.getCases()[coordOrigineX][coordOrigineY]
-        if (c.getJoueur()!=joueurCourant)
+        if (c.getJoueur() != joueurCourant)
             return false
-        if (c.getPion() != null){ // test de tous les Pions
-            if (coordOrigineX+1 < plateau.getTailleHorizontale() && coordOrigineY+1 < plateau.getTailleVerticale()){
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY+1].estLibre())
+        if (c.getPion() != null) { // test de tous les Pions
+            if (coordOrigineX + 1 < plateau.getTailleHorizontale() && coordOrigineY + 1 < plateau.getTailleVerticale()) {
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY + 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY + 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineX+1 < plateau.getTailleHorizontale() && coordOrigineY-1>=0){
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY-1].estLibre())
+            if (coordOrigineX + 1 < plateau.getTailleHorizontale() && coordOrigineY - 1 >= 0) {
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY - 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY - 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineX-1 >= 0 && coordOrigineY+1 < plateau.getTailleVerticale()){
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY+1].estLibre())
+            if (coordOrigineX - 1 >= 0 && coordOrigineY + 1 < plateau.getTailleVerticale()) {
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY + 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY + 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineX-1 >=0 && coordOrigineY-1 >= 0){
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY-1].estLibre())
+            if (coordOrigineX - 1 >= 0 && coordOrigineY - 1 >= 0) {
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY - 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY - 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
         }
 
-        if (c.getPion() is GrandPion || c.getPion() is MoyenPion){ //test du Moyen et Grand Pion
-            if (coordOrigineX+1 < plateau.getTailleHorizontale()){
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY].estLibre())
+        if (c.getPion() is GrandPion || c.getPion() is MoyenPion) { //test du Moyen et Grand Pion
+            if (coordOrigineX + 1 < plateau.getTailleHorizontale()) {
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX+1][coordOrigineY].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX + 1][coordOrigineY].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineX-1 >=0){
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY].estLibre())
+            if (coordOrigineX - 1 >= 0) {
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX-1][coordOrigineY].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX - 1][coordOrigineY].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineY+1 < plateau.getTailleVerticale()){
-                if (plateau.getCases()[coordOrigineX][coordOrigineY+1].estLibre())
+            if (coordOrigineY + 1 < plateau.getTailleVerticale()) {
+                if (plateau.getCases()[coordOrigineX][coordOrigineY + 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX][coordOrigineY+1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX][coordOrigineY + 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
-            if (coordOrigineY-1 >=0){
-                if (plateau.getCases()[coordOrigineX][coordOrigineY-1].estLibre())
+            if (coordOrigineY - 1 >= 0) {
+                if (plateau.getCases()[coordOrigineX][coordOrigineY - 1].estLibre())
                     return true
-                if (plateau.getCases()[coordOrigineX][coordOrigineY-1].getJoueur()!=joueurCourant && c.getPion()!=pionArriveDeZone)
+                if (plateau.getCases()[coordOrigineX][coordOrigineY - 1].getJoueur() != joueurCourant && c.getPion() != pionArriveDeZone)
                     return true
             }
         }
@@ -201,29 +200,29 @@
         coordDestinationY: Int,
         joueur: Joueur?
     ): Boolean {
-        if (joueur!=joueurCourant)
+        if (joueur != joueurCourant)
             return false
-        if (!deplacementPossible(coordOrigineX,coordOrigineY))
+        if (!deplacementPossible(coordOrigineX, coordOrigineY))
             return false
-        val d = Deplacement(Coordonnee(coordOrigineX,coordOrigineY),
-            Coordonnee(coordDestinationX,coordDestinationY)
+        val d = Deplacement(
+            Coordonnee(coordOrigineX, coordOrigineY),
+            Coordonnee(coordDestinationX, coordDestinationY)
         )
         val co = plateau.getCases()[coordOrigineX][coordOrigineY]
         val cd = plateau.getCases()[coordDestinationX][coordDestinationY]
-        if (co.getJoueur()!=cd.getJoueur() && co.getPion()===pionArriveDeZone)
+        if (co.getJoueur() != cd.getJoueur() && co.getPion() === pionArriveDeZone)
             return false
-        val chemin : List<Coordonnee>
+        val chemin: List<Coordonnee>
         try {
             chemin = co.getPion()!!.getDeplacement(d)
-        }
-        catch (e : DeplacementExeption){
+        } catch (e: DeplacementExeption) {
             return false
         }
-        for (i in 0 until chemin.size-1){
+        for (i in 0 until chemin.size - 1) {
             if (!plateau.getCases()[chemin[i].getX()][chemin[i].getY()].estLibre())
                 return false
         }
-        if (cd.getJoueur()==joueurCourant && !cd.estLibre())
+        if (cd.getJoueur() == joueurCourant && !cd.estLibre())
             return false
         return true
     }
@@ -232,14 +231,14 @@
     override fun deplacer(coordOrigineX: Int, coordOrigineY: Int, coordDestinationX: Int, coordDestinationY: Int) {
         val co = plateau.getCases()[coordOrigineX][coordOrigineY]
         val cd = plateau.getCases()[coordDestinationX][coordDestinationY]
-        if (deplacementPossible(coordOrigineX,coordOrigineY,coordDestinationX,coordDestinationY,joueurCourant)){
+        if (deplacementPossible(coordOrigineX, coordOrigineY, coordDestinationX, coordDestinationY, joueurCourant)) {
             nombreCoupsSansPrise += 1
-            if (!cd.estLibre() && cd.getJoueur()!=joueurCourant) {
+            if (!cd.estLibre() && cd.getJoueur() != joueurCourant) {
                 joueurCourant!!.ajouterPionCaptures(cd.getPion()!!)
                 nombreCoupsSansPrise = 0
             }
-            if (cd.getJoueur() != co.getJoueur()){
-                pionArriveDeZone=co.getPion()
+            if (cd.getJoueur() != co.getJoueur()) {
+                pionArriveDeZone = co.getPion()
             }
             plateau.getCases()[coordDestinationX][coordDestinationY].setPion(co.getPion())
             plateau.getCases()[coordOrigineX][coordOrigineY].setPion(null)
@@ -252,6 +251,4 @@
     }
 
 
-
-
 }
\ No newline at end of file
Index: src/main/kotlin/projet/echecmartien/modele/Joueur.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nclass Joueur(pseudo : String) {\r\n    private val pseudo:String\r\n    private var pionsCaptures:Set<Pion>\r\n\r\n    init {\r\n        this.pseudo=pseudo\r\n        this.pionsCaptures= setOf()\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * récupére la liste des pions capturés\r\n     * @return la liste des pions capturés qui est vide si aucun pion n'a été capturé\r\n     */\r\n    fun getPionsCaptures(): Set<Pion> {\r\n        return pionsCaptures\r\n    }\r\n\r\n    /**\r\n     * ajout à la liste d'un pion qui a été capturé\r\n     * @param pion à ajouter\r\n     */\r\n    fun ajouterPionCaptures(pion: Pion) {\r\n        pionsCaptures = pionsCaptures.plus(pion)\r\n    }\r\n\r\n\r\n    /**\r\n     * permet de connaître le nombre de pions capturés\r\n     * @return le nombre de pions capturés\r\n     */\r\n    fun getNbPionsCaptures(): Int {\r\n        return pionsCaptures.size\r\n    }\r\n\r\n\r\n    /**\r\n     * récupère la valeur du pseudo\r\n     *\r\n     * @return la valeur du pseudo\r\n     */\r\n    fun getPseudo(): String {\r\n        return pseudo\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * calcule le score du joueur\r\n     * @return le score du joueur\r\n     */\r\n    fun calculerScore(): Int {\r\n        var res = 0\r\n        for (e in pionsCaptures){\r\n            res+=e.getScore()\r\n        }\r\n        return res\r\n    }\r\n\r\n    override fun equals(other: Any?): Boolean {\r\n        if (other !is Joueur)\r\n            return false\r\n        return pseudo==other.pseudo\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Joueur.kt b/src/main/kotlin/projet/echecmartien/modele/Joueur.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Joueur.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Joueur.kt	(date 1654758491695)
@@ -1,16 +1,15 @@
 package projet.echecmartien.modele
 
-class Joueur(pseudo : String) {
-    private val pseudo:String
-    private var pionsCaptures:Set<Pion>
+class Joueur(pseudo: String) {
+    private val pseudo: String
+    private var pionsCaptures: Set<Pion>
 
     init {
-        this.pseudo=pseudo
-        this.pionsCaptures= setOf()
+        this.pseudo = pseudo
+        this.pionsCaptures = setOf()
     }
 
 
-
     /**
      * récupére la liste des pions capturés
      * @return la liste des pions capturés qui est vide si aucun pion n'a été capturé
@@ -47,15 +46,14 @@
     }
 
 
-
     /**
      * calcule le score du joueur
      * @return le score du joueur
      */
     fun calculerScore(): Int {
         var res = 0
-        for (e in pionsCaptures){
-            res+=e.getScore()
+        for (e in pionsCaptures) {
+            res += e.getScore()
         }
         return res
     }
@@ -63,9 +61,8 @@
     override fun equals(other: Any?): Boolean {
         if (other !is Joueur)
             return false
-        return pseudo==other.pseudo
+        return pseudo == other.pseudo
     }
 
 
-
 }
Index: src/main/kotlin/projet/echecmartien/modele/MoyenPion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\n\r\nclass MoyenPion : GrandPion(){\r\n\r\n    override fun getScore(): Int {\r\n        return 2\r\n    }\r\n\r\n    override fun getDeplacement(deplacement: Deplacement): List<Coordonnee> {\r\n        if (deplacement.longueur()>2)\r\n            throw DeplacementExeption(\"Déplacement illégal\")\r\n        return super.getDeplacement(deplacement)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/MoyenPion.kt b/src/main/kotlin/projet/echecmartien/modele/MoyenPion.kt
--- a/src/main/kotlin/projet/echecmartien/modele/MoyenPion.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/MoyenPion.kt	(date 1654758491656)
@@ -3,14 +3,14 @@
 import projet.echecmartien.exeptions.DeplacementExeption
 
 
-class MoyenPion : GrandPion(){
+class MoyenPion : GrandPion() {
 
     override fun getScore(): Int {
         return 2
     }
 
     override fun getDeplacement(deplacement: Deplacement): List<Coordonnee> {
-        if (deplacement.longueur()>2)
+        if (deplacement.longueur() > 2)
             throw DeplacementExeption("Déplacement illégal")
         return super.getDeplacement(deplacement)
     }
Index: src/main/kotlin/projet/echecmartien/modele/Deplacement.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\nimport kotlin.math.abs\r\n\r\n\r\n/**\r\n * cette classe permet de tester les déplacements sur le plateau de jeu\r\n *\r\n */\r\n\r\nclass Deplacement(origine : Coordonnee, destination : Coordonnee) {\r\n\r\n    private val origine : Coordonnee\r\n    private val destination : Coordonnee\r\n\r\n\r\n    /**\r\n     * dans le constructeur la validité du déplacement dans la grille est testée\r\n     *@throws DeplacementException si le déplacement n'est ni horizontal, ni vertical est ni diagonal\r\n     * les autres cas lèvent une IllegalArgumentException (peut être mis en place avec \"require\")\r\n     */\r\n    init {\r\n        this.origine=origine\r\n        this.destination=destination\r\n    }\r\n\r\n\r\n    /**\r\n     * getter\r\n     * @return la destination de ce déplacement\r\n     */\r\n    fun getDestination():Coordonnee{\r\n        return destination\r\n    }\r\n\r\n\r\n    /**\r\n     * getter\r\n     * @return l'origine de ce déplacement\r\n     */\r\n    fun getOrigine():Coordonnee{\r\n        return origine\r\n    }\r\n\r\n    /**\r\n     *méthode qui permet de tester si le déplacement est horizontal\r\n     * @return true si le déplacement est horizontal, false sinon\r\n     */\r\n    fun estHorizontal() : Boolean {\r\n        return origine.getY()==destination.getY()\r\n    }\r\n\r\n    /**\r\n     *méthode qui permet de tester si le déplacement est vertical\r\n     * @return true si le déplacement est vertical, false sinon\r\n     */\r\n    fun estVertical(): Boolean {\r\n       return origine.getX()==destination.getX()\r\n    }\r\n\r\n    /**\r\n     * méthode qui permet de tester si le déplacement est diagonal\r\n     * @return true si le déplacement est diagonal, false sinon\r\n     */\r\n    fun estDiagonal():Boolean {\r\n        return abs(origine.getX()-destination.getX())==abs(origine.getY()-destination.getY())\r\n    }\r\n\r\n    /**\r\n     *méthode qui permet de calculer le nombre de case d'un déplacement\r\n     * @return le nombre de case que le pion sera déplacée\r\n     */\r\n    fun longueur(): Int {\r\n        if (estHorizontal())\r\n            return abs(origine.getX()-destination.getX())\r\n        return abs(origine.getY()-destination.getY())\r\n    }\r\n\r\n\r\n    /**\r\n     * méthode qui permet de déterminer le sens d'un déplacement vertical\r\n     *\r\n     *@return true si le déplacement est positif, false sinon\r\n     */\r\n    fun estVerticalPositif():Boolean{\r\n        return origine.getY()-destination.getY()<0&&estVertical()\r\n    }\r\n\r\n    /**\r\n     * méthode qui permet de déterminer le sens d'un déplacement horizontal\r\n     *\r\n     * @return true si le déplacement est positif, false sinon\r\n     */\r\n    fun estHorizontalPositif():Boolean{\r\n        return origine.getX()-destination.getX()<0&&estHorizontal()\r\n    }\r\n\r\n    /**\r\n     * méthode qui permet de déterminer si le sens d'un déplacement diagonal est positif en X et en Y\r\n     *\r\n     * @return true si le déplacement est positif en X et Y, false sinon\r\n     */\r\n    fun estDiagonalPositifXPositifY(): Boolean{\r\n        return origine.getX()-destination.getX()<0&&origine.getY()-destination.getY()<0&&estDiagonal()\r\n    }\r\n    /**\r\n     * méthode qui permet de déterminer si le sens d'un déplacement diagonal est négatif en X et positif en Y\r\n     *\r\n     * @return true si le déplacement est négatif en X et positif en Y, false sinon\r\n     */\r\n    fun estDiagonalNegatifXPositifY(): Boolean{\r\n        return origine.getX()-destination.getX()>=0&&origine.getY()-destination.getY()<0&&estDiagonal()\r\n    }\r\n\r\n    /**\r\n     *\r\n     * méthode qui permet de déterminer si le sens d'un déplacement diagonal est positif en X et négatif en Y\r\n     *\r\n     * @return true si le déplacement est positif en X et négatif en Y, false sinon\r\n     */\r\n    fun estDiagonalPositifXNegatifY(): Boolean{\r\n        return origine.getX()-destination.getX()<0&&origine.getY()-destination.getY()>=0&&estDiagonal()\r\n    }\r\n\r\n    /**\r\n     * méthode qui permet de déterminer si le sens d'un déplacement diagonal est négatif en X et négatif en Y\r\n     *\r\n     * @return true si le déplacement est négatif en X et négatif en Y, false sinon\r\n     */\r\n    fun estDiagonalNegatifXNegatifY(): Boolean{\r\n        return origine.getX()-destination.getX()>=0&&origine.getY()-destination.getY()>=0&&estDiagonal()\r\n    }\r\n\r\n    /**\r\n     * donne le chemin de coordonnées que constitue le déplacement\r\n     * du point de départ vers le point d'arrivée si le déplacement demandé est vertical.\r\n     *\r\n     * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée\r\n     * si le déplacement est vertical. Le point de départ n'est pas stocké dans la liste.\r\n     * @throws DeplacementException est levée si le déplacement n'est pas vertical\r\n     */\r\n    fun getCheminVertical(): List<Coordonnee> {\r\n        if (!estVertical())\r\n            throw DeplacementExeption(\"Le chemin n'est pas vertical\")\r\n        var res = listOf<Coordonnee>()\r\n        if (estVerticalPositif()){\r\n            for (i in origine.getY()+1 until destination.getY()+1){\r\n                res = res.plus(Coordonnee(origine.getX(),i))\r\n            }\r\n            return res\r\n        }\r\n        for (i in origine.getY()-1 downTo destination.getY()){\r\n            res = res.plus(Coordonnee(origine.getX(),i))\r\n        }\r\n        return res\r\n    }\r\n\r\n\r\n    /**\r\n     * donne le chemin de coordonnées que constitue le déplacement\r\n     * du point de départ vers le point d'arrivée si le déplaceme{\"origine Y dépasse\"}nt demandé est horizontal.\r\n     *\r\n     * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée.\r\n     * Le point de départ n'est pas stocké dans la liste.\r\n     * si le déplacement est horizontal\r\n     * @throws DeplacementException est levée si le déplacement n'est pas horizontal\r\n     */\r\n    fun getCheminHorizontal(): List<Coordonnee> {\r\n       if (!estHorizontal())\r\n           throw DeplacementExeption(\"Le chemin n'est pas horizontal\")\r\n        var res = listOf<Coordonnee>()\r\n        if (estHorizontalPositif()){\r\n            for (i in origine.getX()+1 until destination.getX()+1){\r\n                res = res.plus(Coordonnee(i,origine.getY()))\r\n            }\r\n            return res\r\n        }\r\n        for (i in origine.getX()-1 downTo destination.getX()){\r\n            res = res.plus(Coordonnee(i,origine.getY()))\r\n        }\r\n        return res\r\n    }\r\n\r\n\r\n    /**\r\n     * donne le chemin de coordonnées que constitue le déplacement\r\n     * du point de départ vers le point d'arrivée si le déplacement demandé est diagonal.\r\n     * Le point de départ n'est pas stocké dans la liste.\r\n     *\r\n     * @return une liste de coordonnées qui constitue le déplacement du point de départ vers le point d'arrivée\r\n     * si le déplacement est diagonal\r\n     * @throws DeplacementException est levée si le déplacement n'est pas diagonal\r\n     */\r\n    fun getCheminDiagonal(): List<Coordonnee> {\r\n        if (!estDiagonal())\r\n            throw DeplacementExeption(\"Le chemin n'est pas diagonal\")\r\n        var res = listOf<Coordonnee>()\r\n        if (estDiagonalPositifXPositifY()) {\r\n            for (i in 0 until longueur()) {\r\n                res = res.plus(Coordonnee(origine.getX() + i+1, origine.getY() + i+1))\r\n            }\r\n            return res\r\n        }\r\n        if (estDiagonalNegatifXNegatifY()) {\r\n            for (i in 0 until longueur()) {\r\n                res = res.plus(Coordonnee(origine.getX() -1-i, origine.getY() -i-1))\r\n            }\r\n            return res\r\n        }\r\n        if (estDiagonalPositifXNegatifY()) {\r\n            for (i in 0 until longueur()) {\r\n                res = res.plus(Coordonnee(origine.getX() +1+i, origine.getY() -i-1))\r\n            }\r\n            return res\r\n        }\r\n        for (i in 0 until longueur()) {\r\n            res = res.plus(Coordonnee(origine.getX() -1-i, origine.getY() +i+1))\r\n        }\r\n        return res\r\n    }\r\n\r\n    override fun equals(other: Any?): Boolean {\r\n        if (other !is Deplacement)\r\n            return false\r\n        return origine==other.origine && destination==other.destination\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Deplacement.kt b/src/main/kotlin/projet/echecmartien/modele/Deplacement.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Deplacement.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Deplacement.kt	(date 1654758491717)
@@ -9,10 +9,10 @@
  *
  */
 
-class Deplacement(origine : Coordonnee, destination : Coordonnee) {
+class Deplacement(origine: Coordonnee, destination: Coordonnee) {
 
-    private val origine : Coordonnee
-    private val destination : Coordonnee
+    private val origine: Coordonnee
+    private val destination: Coordonnee
 
 
     /**
@@ -21,8 +21,8 @@
      * les autres cas lèvent une IllegalArgumentException (peut être mis en place avec "require")
      */
     init {
-        this.origine=origine
-        this.destination=destination
+        this.origine = origine
+        this.destination = destination
     }
 
 
@@ -30,7 +30,7 @@
      * getter
      * @return la destination de ce déplacement
      */
-    fun getDestination():Coordonnee{
+    fun getDestination(): Coordonnee {
         return destination
     }
 
@@ -39,7 +39,7 @@
      * getter
      * @return l'origine de ce déplacement
      */
-    fun getOrigine():Coordonnee{
+    fun getOrigine(): Coordonnee {
         return origine
     }
 
@@ -47,8 +47,8 @@
      *méthode qui permet de tester si le déplacement est horizontal
      * @return true si le déplacement est horizontal, false sinon
      */
-    fun estHorizontal() : Boolean {
-        return origine.getY()==destination.getY()
+    fun estHorizontal(): Boolean {
+        return origine.getY() == destination.getY()
     }
 
     /**
@@ -56,15 +56,15 @@
      * @return true si le déplacement est vertical, false sinon
      */
     fun estVertical(): Boolean {
-       return origine.getX()==destination.getX()
+        return origine.getX() == destination.getX()
     }
 
     /**
      * méthode qui permet de tester si le déplacement est diagonal
      * @return true si le déplacement est diagonal, false sinon
      */
-    fun estDiagonal():Boolean {
-        return abs(origine.getX()-destination.getX())==abs(origine.getY()-destination.getY())
+    fun estDiagonal(): Boolean {
+        return abs(origine.getX() - destination.getX()) == abs(origine.getY() - destination.getY())
     }
 
     /**
@@ -73,8 +73,8 @@
      */
     fun longueur(): Int {
         if (estHorizontal())
-            return abs(origine.getX()-destination.getX())
-        return abs(origine.getY()-destination.getY())
+            return abs(origine.getX() - destination.getX())
+        return abs(origine.getY() - destination.getY())
     }
 
 
@@ -83,8 +83,8 @@
      *
      *@return true si le déplacement est positif, false sinon
      */
-    fun estVerticalPositif():Boolean{
-        return origine.getY()-destination.getY()<0&&estVertical()
+    fun estVerticalPositif(): Boolean {
+        return origine.getY() - destination.getY() < 0 && estVertical()
     }
 
     /**
@@ -92,8 +92,8 @@
      *
      * @return true si le déplacement est positif, false sinon
      */
-    fun estHorizontalPositif():Boolean{
-        return origine.getX()-destination.getX()<0&&estHorizontal()
+    fun estHorizontalPositif(): Boolean {
+        return origine.getX() - destination.getX() < 0 && estHorizontal()
     }
 
     /**
@@ -101,16 +101,17 @@
      *
      * @return true si le déplacement est positif en X et Y, false sinon
      */
-    fun estDiagonalPositifXPositifY(): Boolean{
-        return origine.getX()-destination.getX()<0&&origine.getY()-destination.getY()<0&&estDiagonal()
+    fun estDiagonalPositifXPositifY(): Boolean {
+        return origine.getX() - destination.getX() < 0 && origine.getY() - destination.getY() < 0 && estDiagonal()
     }
+
     /**
      * méthode qui permet de déterminer si le sens d'un déplacement diagonal est négatif en X et positif en Y
      *
      * @return true si le déplacement est négatif en X et positif en Y, false sinon
      */
-    fun estDiagonalNegatifXPositifY(): Boolean{
-        return origine.getX()-destination.getX()>=0&&origine.getY()-destination.getY()<0&&estDiagonal()
+    fun estDiagonalNegatifXPositifY(): Boolean {
+        return origine.getX() - destination.getX() >= 0 && origine.getY() - destination.getY() < 0 && estDiagonal()
     }
 
     /**
@@ -119,8 +120,8 @@
      *
      * @return true si le déplacement est positif en X et négatif en Y, false sinon
      */
-    fun estDiagonalPositifXNegatifY(): Boolean{
-        return origine.getX()-destination.getX()<0&&origine.getY()-destination.getY()>=0&&estDiagonal()
+    fun estDiagonalPositifXNegatifY(): Boolean {
+        return origine.getX() - destination.getX() < 0 && origine.getY() - destination.getY() >= 0 && estDiagonal()
     }
 
     /**
@@ -128,8 +129,8 @@
      *
      * @return true si le déplacement est négatif en X et négatif en Y, false sinon
      */
-    fun estDiagonalNegatifXNegatifY(): Boolean{
-        return origine.getX()-destination.getX()>=0&&origine.getY()-destination.getY()>=0&&estDiagonal()
+    fun estDiagonalNegatifXNegatifY(): Boolean {
+        return origine.getX() - destination.getX() >= 0 && origine.getY() - destination.getY() >= 0 && estDiagonal()
     }
 
     /**
@@ -144,14 +145,14 @@
         if (!estVertical())
             throw DeplacementExeption("Le chemin n'est pas vertical")
         var res = listOf<Coordonnee>()
-        if (estVerticalPositif()){
-            for (i in origine.getY()+1 until destination.getY()+1){
-                res = res.plus(Coordonnee(origine.getX(),i))
+        if (estVerticalPositif()) {
+            for (i in origine.getY() + 1 until destination.getY() + 1) {
+                res = res.plus(Coordonnee(origine.getX(), i))
             }
             return res
         }
-        for (i in origine.getY()-1 downTo destination.getY()){
-            res = res.plus(Coordonnee(origine.getX(),i))
+        for (i in origine.getY() - 1 downTo destination.getY()) {
+            res = res.plus(Coordonnee(origine.getX(), i))
         }
         return res
     }
@@ -167,17 +168,17 @@
      * @throws DeplacementException est levée si le déplacement n'est pas horizontal
      */
     fun getCheminHorizontal(): List<Coordonnee> {
-       if (!estHorizontal())
-           throw DeplacementExeption("Le chemin n'est pas horizontal")
+        if (!estHorizontal())
+            throw DeplacementExeption("Le chemin n'est pas horizontal")
         var res = listOf<Coordonnee>()
-        if (estHorizontalPositif()){
-            for (i in origine.getX()+1 until destination.getX()+1){
-                res = res.plus(Coordonnee(i,origine.getY()))
+        if (estHorizontalPositif()) {
+            for (i in origine.getX() + 1 until destination.getX() + 1) {
+                res = res.plus(Coordonnee(i, origine.getY()))
             }
             return res
         }
-        for (i in origine.getX()-1 downTo destination.getX()){
-            res = res.plus(Coordonnee(i,origine.getY()))
+        for (i in origine.getX() - 1 downTo destination.getX()) {
+            res = res.plus(Coordonnee(i, origine.getY()))
         }
         return res
     }
@@ -198,24 +199,24 @@
         var res = listOf<Coordonnee>()
         if (estDiagonalPositifXPositifY()) {
             for (i in 0 until longueur()) {
-                res = res.plus(Coordonnee(origine.getX() + i+1, origine.getY() + i+1))
+                res = res.plus(Coordonnee(origine.getX() + i + 1, origine.getY() + i + 1))
             }
             return res
         }
         if (estDiagonalNegatifXNegatifY()) {
             for (i in 0 until longueur()) {
-                res = res.plus(Coordonnee(origine.getX() -1-i, origine.getY() -i-1))
+                res = res.plus(Coordonnee(origine.getX() - 1 - i, origine.getY() - i - 1))
             }
             return res
         }
         if (estDiagonalPositifXNegatifY()) {
             for (i in 0 until longueur()) {
-                res = res.plus(Coordonnee(origine.getX() +1+i, origine.getY() -i-1))
+                res = res.plus(Coordonnee(origine.getX() + 1 + i, origine.getY() - i - 1))
             }
             return res
         }
         for (i in 0 until longueur()) {
-            res = res.plus(Coordonnee(origine.getX() -1-i, origine.getY() +i+1))
+            res = res.plus(Coordonnee(origine.getX() - 1 - i, origine.getY() + i + 1))
         }
         return res
     }
@@ -223,10 +224,8 @@
     override fun equals(other: Any?): Boolean {
         if (other !is Deplacement)
             return false
-        return origine==other.origine && destination==other.destination
+        return origine == other.origine && destination == other.destination
     }
 
 
-
-
 }
Index: src/main/kotlin/projet/echecmartien/vue/CasePlateau.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.vue\r\n\r\nimport javafx.scene.control.Button\r\nimport javafx.scene.layout.Pane\r\nimport javafx.scene.paint.Paint\r\nimport javafx.scene.shape.Circle\r\nimport kotlin.math.absoluteValue\r\n\r\nclass CasePlateau(\r\n    private val tailleBoutonX: Double,\r\n    private val tailleBoutonY: Double,\r\n    lettreColonne: String,\r\n    numLigne: String,\r\n    private val borderSize: Int\r\n) : Pane() {\r\n    val bouton = Button(\"$lettreColonne$numLigne\")\r\n    val isGrandPion: Boolean = false\r\n    val isMoyenPion: Boolean = false\r\n    val isPetitPion: Boolean = false\r\n\r\n    val minTailleBouton: Double\r\n\r\n    val tailleGrandPion: Double\r\n    val couleurGrandPion = \"#BDA8A8\"\r\n    val tailleMoyenPion: Double\r\n    val couleurMoyenPion = \"#9C8165\"\r\n    val taillePetitPion: Double\r\n    val couleurPetitPion = \"#6E4404\"\r\n\r\n\r\n    val cercle = Circle(tailleBoutonX / 2 + borderSize, tailleBoutonY / 2 + borderSize, 0.0)\r\n\r\n    init {\r\n        if (tailleBoutonX <= tailleBoutonY)\r\n            minTailleBouton = tailleBoutonX\r\n        else\r\n            minTailleBouton = tailleBoutonY\r\n\r\n        tailleGrandPion = (18.0 / 20.0)/2.0 * minTailleBouton\r\n        tailleMoyenPion = (6.0 / 8.0)/2.0 * minTailleBouton\r\n        taillePetitPion = (1.0 / 2.0)/2.0 * minTailleBouton\r\n\r\n        println(minTailleBouton)\r\n        println(tailleGrandPion)\r\n\r\n        bouton.isVisible = false\r\n        bouton.setPrefSize(tailleBoutonX, tailleBoutonY)\r\n        this.children.add(cercle)\r\n        this.children.add(bouton)\r\n        cercle.fill = Paint.valueOf(\"#FFD000\")\r\n        this.style = \"-fx-border-color: #000000; -fx-border-width: ${borderSize}px;\"\r\n    }\r\n\r\n    fun retirerPion() {\r\n        cercle.radius = 0.0\r\n    }\r\n\r\n    fun placerPion(pion: String) {\r\n        if (cercle.radius.absoluteValue != 0.0)\r\n            throw IllegalStateException()\r\n        else if (pion == \"grand\") {\r\n            cercle.radius = tailleGrandPion\r\n            cercle.fill = Paint.valueOf(couleurGrandPion)\r\n        } else if (pion == \"moyen\") {\r\n            cercle.radius = tailleMoyenPion\r\n            cercle.fill = Paint.valueOf(couleurMoyenPion)\r\n        } else if (pion == \"petit\") {\r\n            cercle.radius = taillePetitPion\r\n            cercle.fill = Paint.valueOf(couleurPetitPion)\r\n        } else\r\n            throw IllegalArgumentException()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/vue/CasePlateau.kt b/src/main/kotlin/projet/echecmartien/vue/CasePlateau.kt
--- a/src/main/kotlin/projet/echecmartien/vue/CasePlateau.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/vue/CasePlateau.kt	(date 1654758491650)
@@ -7,38 +7,38 @@
 import kotlin.math.absoluteValue
 
 class CasePlateau(
-    private val tailleBoutonX: Double,
-    private val tailleBoutonY: Double,
+    tailleBoutonX: Double,
+    tailleBoutonY: Double,
     lettreColonne: String,
     numLigne: String,
-    private val borderSize: Int
+    borderSize: Int
 ) : Pane() {
-    val bouton = Button("$lettreColonne$numLigne")
-    val isGrandPion: Boolean = false
-    val isMoyenPion: Boolean = false
-    val isPetitPion: Boolean = false
+    private val bouton = Button("$lettreColonne$numLigne")
+    private val isGrandPion: Boolean = false
+    private val isMoyenPion: Boolean = false
+    private val isPetitPion: Boolean = false
 
-    val minTailleBouton: Double
+    private val minTailleBouton: Double
 
-    val tailleGrandPion: Double
-    val couleurGrandPion = "#BDA8A8"
-    val tailleMoyenPion: Double
-    val couleurMoyenPion = "#9C8165"
-    val taillePetitPion: Double
-    val couleurPetitPion = "#6E4404"
+    private val tailleGrandPion: Double
+    private val couleurGrandPion = "#BDA8A8"
+    private val tailleMoyenPion: Double
+    private val couleurMoyenPion = "#9C8165"
+    private val taillePetitPion: Double
+    private val couleurPetitPion = "#6E4404"
 
 
-    val cercle = Circle(tailleBoutonX / 2 + borderSize, tailleBoutonY / 2 + borderSize, 0.0)
+    private val cercle = Circle(tailleBoutonX / 2 + borderSize, tailleBoutonY / 2 + borderSize, 0.0)
 
     init {
-        if (tailleBoutonX <= tailleBoutonY)
-            minTailleBouton = tailleBoutonX
+        minTailleBouton = if (tailleBoutonX <= tailleBoutonY)
+            tailleBoutonX
         else
-            minTailleBouton = tailleBoutonY
+            tailleBoutonY
 
-        tailleGrandPion = (18.0 / 20.0)/2.0 * minTailleBouton
-        tailleMoyenPion = (6.0 / 8.0)/2.0 * minTailleBouton
-        taillePetitPion = (1.0 / 2.0)/2.0 * minTailleBouton
+        tailleGrandPion = (18.0 / 20.0) / 2.0 * minTailleBouton
+        tailleMoyenPion = (6.0 / 8.0) / 2.0 * minTailleBouton
+        taillePetitPion = (1.0 / 2.0) / 2.0 * minTailleBouton
 
         println(minTailleBouton)
         println(tailleGrandPion)
Index: src/main/kotlin/projet/echecmartien/librairie/GeneralData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.librairie\r\n\r\n\r\n\r\nconst val TAILLEHORIZONTALE=4\r\nconst val TAILLEVERTICALE=8\r\n\r\nenum class EnumPion(var valeur: String) {\r\n    GRANDPION(\"G\"),\r\n    MOYENPION(\"M\"),\r\n    PETITPION(\"P\"),\r\n    LIBRE(\"  \");\r\n}\r\n\r\nclass GeneralData {\r\n    val tableau = Array(TAILLEHORIZONTALE) { Array(TAILLEVERTICALE, { EnumPion.LIBRE }) }\r\n\r\n    init {\r\n\r\n        tableau[2][0]= EnumPion.MOYENPION\r\n        tableau[1][1]= EnumPion.MOYENPION\r\n        tableau[0][2]= EnumPion.MOYENPION\r\n        tableau[3][5]= EnumPion.MOYENPION\r\n        tableau[2][6]= EnumPion.MOYENPION\r\n        tableau[1][7]= EnumPion.MOYENPION\r\n        tableau[0][0]= EnumPion.GRANDPION\r\n        tableau[1][0]= EnumPion.GRANDPION\r\n        tableau[0][1]= EnumPion.GRANDPION\r\n        tableau[3][6]= EnumPion.GRANDPION\r\n        tableau[3][7]= EnumPion.GRANDPION\r\n        tableau[2][7]= EnumPion.GRANDPION\r\n        tableau[1][2]= EnumPion.PETITPION\r\n        tableau[2][2]= EnumPion.PETITPION\r\n        tableau[2][1]= EnumPion.PETITPION\r\n        tableau[2][5]= EnumPion.PETITPION\r\n        tableau[1][6]= EnumPion.PETITPION\r\n        tableau[1][5]= EnumPion.PETITPION\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/librairie/GeneralData.kt b/src/main/kotlin/projet/echecmartien/librairie/GeneralData.kt
--- a/src/main/kotlin/projet/echecmartien/librairie/GeneralData.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/librairie/GeneralData.kt	(date 1654758491700)
@@ -1,9 +1,8 @@
 package projet.echecmartien.librairie
 
 
-
-const val TAILLEHORIZONTALE=4
-const val TAILLEVERTICALE=8
+const val TAILLEHORIZONTALE = 4
+const val TAILLEVERTICALE = 8
 
 enum class EnumPion(var valeur: String) {
     GRANDPION("G"),
@@ -17,23 +16,23 @@
 
     init {
 
-        tableau[2][0]= EnumPion.MOYENPION
-        tableau[1][1]= EnumPion.MOYENPION
-        tableau[0][2]= EnumPion.MOYENPION
-        tableau[3][5]= EnumPion.MOYENPION
-        tableau[2][6]= EnumPion.MOYENPION
-        tableau[1][7]= EnumPion.MOYENPION
-        tableau[0][0]= EnumPion.GRANDPION
-        tableau[1][0]= EnumPion.GRANDPION
-        tableau[0][1]= EnumPion.GRANDPION
-        tableau[3][6]= EnumPion.GRANDPION
-        tableau[3][7]= EnumPion.GRANDPION
-        tableau[2][7]= EnumPion.GRANDPION
-        tableau[1][2]= EnumPion.PETITPION
-        tableau[2][2]= EnumPion.PETITPION
-        tableau[2][1]= EnumPion.PETITPION
-        tableau[2][5]= EnumPion.PETITPION
-        tableau[1][6]= EnumPion.PETITPION
-        tableau[1][5]= EnumPion.PETITPION
+        tableau[2][0] = EnumPion.MOYENPION
+        tableau[1][1] = EnumPion.MOYENPION
+        tableau[0][2] = EnumPion.MOYENPION
+        tableau[3][5] = EnumPion.MOYENPION
+        tableau[2][6] = EnumPion.MOYENPION
+        tableau[1][7] = EnumPion.MOYENPION
+        tableau[0][0] = EnumPion.GRANDPION
+        tableau[1][0] = EnumPion.GRANDPION
+        tableau[0][1] = EnumPion.GRANDPION
+        tableau[3][6] = EnumPion.GRANDPION
+        tableau[3][7] = EnumPion.GRANDPION
+        tableau[2][7] = EnumPion.GRANDPION
+        tableau[1][2] = EnumPion.PETITPION
+        tableau[2][2] = EnumPion.PETITPION
+        tableau[2][1] = EnumPion.PETITPION
+        tableau[2][5] = EnumPion.PETITPION
+        tableau[1][6] = EnumPion.PETITPION
+        tableau[1][5] = EnumPion.PETITPION
     }
 }
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/CaseTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\n\r\ninternal class CaseTest {\r\n\r\n    @Test\r\n    fun estLibreVrai() {\r\n        val c = Case()\r\n        assertTrue(c.estLibre())\r\n    }\r\n\r\n    @Test\r\n    fun estLibreFaux() {\r\n        val c = Case()\r\n        c.setPion(PetitPion())\r\n        assertFalse(c.estLibre())\r\n    }\r\n\r\n    @Test\r\n    fun getJoueurNull() {\r\n        val c = Case()\r\n        assertEquals(null, c.getJoueur())\r\n    }\r\n\r\n\r\n    @Test\r\n    fun setJoueurNull() {\r\n        val c = Case()\r\n        c.setJoueur(null)\r\n        assertEquals(null, c.getJoueur())\r\n    }\r\n\r\n    @Test\r\n    fun setEtGetJoueurPasNull() {\r\n        val c = Case()\r\n        c.setJoueur(Joueur(\"zzz\"))\r\n        assertEquals(Joueur(\"zzz\"), c.getJoueur())\r\n    }\r\n\r\n    @Test\r\n    fun getPionNull() {\r\n        val c = Case()\r\n        assertEquals(null, c.getPion())\r\n    }\r\n\r\n    @Test\r\n    fun setPionNull() {\r\n        val c = Case()\r\n        c.setPion(null)\r\n        assertEquals(null , c.getPion())\r\n    }\r\n\r\n    @Test\r\n    fun setEtGetPionPasNull() {\r\n        val c = Case()\r\n        c.setPion(PetitPion())\r\n        assertEquals(PetitPion(), c.getPion())\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/CaseTest.kt b/src/test/kotlin/projet/echecmartien/modele/CaseTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/CaseTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/CaseTest.kt	(date 1654758491747)
@@ -50,7 +50,7 @@
     fun setPionNull() {
         val c = Case()
         c.setPion(null)
-        assertEquals(null , c.getPion())
+        assertEquals(null, c.getPion())
     }
 
     @Test
Index: src/test/kotlin/projet/echecmartien/modele/CoordonneeTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport org.junit.jupiter.api.BeforeEach\r\n\r\ninternal class CoordonneeTest {\r\n\r\n    private val c = Coordonnee(-10,666)\r\n\r\n    @Test\r\n    fun getX() {\r\n        assertEquals(-10,c.getX())\r\n    }\r\n\r\n    @Test\r\n    fun getY() {\r\n        assertEquals(666,c.getY())\r\n    }\r\n\r\n    @Test\r\n    fun testToString() {\r\n        assertEquals(\"(-10,666)\", c.toString())\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/CoordonneeTest.kt b/src/test/kotlin/projet/echecmartien/modele/CoordonneeTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/CoordonneeTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/CoordonneeTest.kt	(date 1654758491664)
@@ -3,20 +3,19 @@
 import org.junit.jupiter.api.Test
 
 import org.junit.jupiter.api.Assertions.*
-import org.junit.jupiter.api.BeforeEach
 
 internal class CoordonneeTest {
 
-    private val c = Coordonnee(-10,666)
+    private val c = Coordonnee(-10, 666)
 
     @Test
     fun getX() {
-        assertEquals(-10,c.getX())
+        assertEquals(-10, c.getX())
     }
 
     @Test
     fun getY() {
-        assertEquals(666,c.getY())
+        assertEquals(666, c.getY())
     }
 
     @Test
Index: .idea/libraries/Maven__org_jetbrains_annotations_13_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_jetbrains_annotations_13_0.xml b/.idea/libraries/Maven__org_jetbrains_annotations_13_0.xml
new file mode 100644
--- /dev/null	(date 1654757073936)
+++ b/.idea/libraries/Maven__org_jetbrains_annotations_13_0.xml	(date 1654757073936)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.jetbrains:annotations:13.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/13.0/annotations-13.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/kotlin/projet/echecmartien/exeptions/DeplacementExeption.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.exeptions\r\n\r\nclass DeplacementExeption (message : String) : Exception(message) {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/exeptions/DeplacementExeption.kt b/src/main/kotlin/projet/echecmartien/exeptions/DeplacementExeption.kt
--- a/src/main/kotlin/projet/echecmartien/exeptions/DeplacementExeption.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/exeptions/DeplacementExeption.kt	(date 1654758491638)
@@ -1,4 +1,4 @@
 package projet.echecmartien.exeptions
 
-class DeplacementExeption (message : String) : Exception(message) {
+class DeplacementExeption(message: String) : Exception(message) {
 }
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/PlateauTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\n\r\ninternal class PlateauTest {\r\n\r\n    @Test\r\n    fun getTailleHorizontale() {\r\n        val p = Plateau()\r\n        assertEquals(4,p.getTailleHorizontale())\r\n    }\r\n\r\n    @Test\r\n    fun getTailleVerticale() {\r\n        val p = Plateau()\r\n        assertEquals(8,p.getTailleVerticale())\r\n    }\r\n\r\n    @Test\r\n    fun getCases() {\r\n        val p = Plateau()\r\n        for (e in p.getCases()){\r\n            for (el in e){\r\n                assertNull(el.getPion())\r\n                assertNull(el.getJoueur())\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun testInitialiserPlateau() {\r\n        val p = Plateau()\r\n        p.initialiser()\r\n        // Test des Pions du joueur 2 (celui du haut)\r\n        assertEquals(GrandPion(), p.getCases()[0][0].getPion())\r\n        assertEquals(GrandPion(), p.getCases()[1][0].getPion())\r\n        assertEquals(GrandPion(), p.getCases()[0][1].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[2][0].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[1][1].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[0][2].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[2][1].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[2][2].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[1][2].getPion())\r\n\r\n        //Test de toutes les cases vides du plateau\r\n        for (i in 0 until 4) {\r\n            assertNull(p.getCases()[3][i].getPion()) // Test des cases vides du coté du joueur 2 à droite\r\n            assertNull(p.getCases()[0][4+i].getPion()) // Test des cases vides du coté du joueur 1 à gauche\r\n            assertNull(p.getCases()[i][3].getPion()) // Test des cases vides du coté du joueur 2 devant ces pions\r\n            assertNull(p.getCases()[i][4].getPion())  // Test des cases vides du coté du joueur 1 devant ces pions\r\n        }\r\n\r\n        //Test des Pions du joueurs 1 (celui du bas)\r\n        assertEquals(GrandPion(), p.getCases()[3][7].getPion())\r\n        assertEquals(GrandPion(), p.getCases()[3][6].getPion())\r\n        assertEquals(GrandPion(), p.getCases()[2][7].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[1][7].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[2][6].getPion())\r\n        assertEquals(MoyenPion(), p.getCases()[3][5].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[2][5].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[1][5].getPion())\r\n        assertEquals(PetitPion(), p.getCases()[1][6].getPion())\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/PlateauTest.kt b/src/test/kotlin/projet/echecmartien/modele/PlateauTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/PlateauTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/PlateauTest.kt	(date 1654758491741)
@@ -9,20 +9,20 @@
     @Test
     fun getTailleHorizontale() {
         val p = Plateau()
-        assertEquals(4,p.getTailleHorizontale())
+        assertEquals(4, p.getTailleHorizontale())
     }
 
     @Test
     fun getTailleVerticale() {
         val p = Plateau()
-        assertEquals(8,p.getTailleVerticale())
+        assertEquals(8, p.getTailleVerticale())
     }
 
     @Test
     fun getCases() {
         val p = Plateau()
-        for (e in p.getCases()){
-            for (el in e){
+        for (e in p.getCases()) {
+            for (el in e) {
                 assertNull(el.getPion())
                 assertNull(el.getJoueur())
             }
@@ -47,7 +47,7 @@
         //Test de toutes les cases vides du plateau
         for (i in 0 until 4) {
             assertNull(p.getCases()[3][i].getPion()) // Test des cases vides du coté du joueur 2 à droite
-            assertNull(p.getCases()[0][4+i].getPion()) // Test des cases vides du coté du joueur 1 à gauche
+            assertNull(p.getCases()[0][4 + i].getPion()) // Test des cases vides du coté du joueur 1 à gauche
             assertNull(p.getCases()[i][3].getPion()) // Test des cases vides du coté du joueur 2 devant ces pions
             assertNull(p.getCases()[i][4].getPion())  // Test des cases vides du coté du joueur 1 devant ces pions
         }
Index: .idea/libraries/Maven__org_controlsfx_controlsfx_11_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_controlsfx_controlsfx_11_1_1.xml b/.idea/libraries/Maven__org_controlsfx_controlsfx_11_1_1.xml
new file mode 100644
--- /dev/null	(date 1654757073920)
+++ b/.idea/libraries/Maven__org_controlsfx_controlsfx_11_1_1.xml	(date 1654757073920)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.controlsfx:controlsfx:11.1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/controlsfx/controlsfx/11.1.1/controlsfx-11.1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/controlsfx/controlsfx/11.1.1/controlsfx-11.1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/controlsfx/controlsfx/11.1.1/controlsfx-11.1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/PetitPionTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\nimport org.junit.jupiter.api.assertThrows\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\ninternal class PetitPionTest {\r\n\r\n    @Test\r\n    fun getScore() {\r\n        val p = PetitPion()\r\n        assertEquals(1,p.getScore())\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementExeptionLongeur() {\r\n        val p = PetitPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,2))\r\n        assertThrows<DeplacementExeption> { p.getDeplacement(d) }\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementExeptionDiagonale() {\r\n        val p = PetitPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(0,1))\r\n        assertThrows<DeplacementExeption> { p.getDeplacement(d) }\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementExeptionDeplacement() {\r\n        val p = PetitPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(1,3))\r\n        assertThrows<DeplacementExeption> { p.getDeplacement(d) }\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementQuiMarche(){\r\n        val p = PetitPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(1,1))\r\n        assertEquals(listOf(Coordonnee(1,1)), p.getDeplacement(d))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/PetitPionTest.kt b/src/test/kotlin/projet/echecmartien/modele/PetitPionTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/PetitPionTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/PetitPionTest.kt	(date 1654758491626)
@@ -11,34 +11,34 @@
     @Test
     fun getScore() {
         val p = PetitPion()
-        assertEquals(1,p.getScore())
+        assertEquals(1, p.getScore())
     }
 
     @Test
     fun getDeplacementExeptionLongeur() {
         val p = PetitPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,2))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(2, 2))
         assertThrows<DeplacementExeption> { p.getDeplacement(d) }
     }
 
     @Test
     fun getDeplacementExeptionDiagonale() {
         val p = PetitPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(0,1))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(0, 1))
         assertThrows<DeplacementExeption> { p.getDeplacement(d) }
     }
 
     @Test
     fun getDeplacementExeptionDeplacement() {
         val p = PetitPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(1,3))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(1, 3))
         assertThrows<DeplacementExeption> { p.getDeplacement(d) }
     }
 
     @Test
-    fun getDeplacementQuiMarche(){
+    fun getDeplacementQuiMarche() {
         val p = PetitPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(1,1))
-        assertEquals(listOf(Coordonnee(1,1)), p.getDeplacement(d))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(1, 1))
+        assertEquals(listOf(Coordonnee(1, 1)), p.getDeplacement(d))
     }
 }
\ No newline at end of file
Index: .idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_2.xml b/.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_2.xml
new file mode 100644
--- /dev/null	(date 1654757073920)
+++ b/.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_2.xml	(date 1654757073920)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apiguardian:apiguardian-api:1.1.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/kotlin/projet/echecmartien/modele/Case.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\n\r\n\r\nclass Case {\r\n    private var joueur : Joueur? = null\r\n    private var pion : Pion? = null\r\n\r\n    /**\r\n     * teste si une case contient un pion ou non\r\n     * @return true si la case ne contient pas un pion, false sinon.\r\n     */\r\n    fun estLibre(): Boolean {\r\n        return pion==null\r\n    }\r\n\r\n    /** getter\r\n     * @return le joueur associé à la case\r\n     */\r\n    fun getJoueur():Joueur? {\r\n        return joueur\r\n    }\r\n\r\n    /** setter\r\n     * @param joueur qui est associé à la case\r\n     */\r\n    fun setJoueur(joueur: Joueur?) {\r\n        this.joueur=joueur\r\n    }\r\n\r\n    /** getter\r\n     * @return le pion associé à la case\r\n     */\r\n    fun getPion():Pion? {\r\n        return pion\r\n    }\r\n\r\n    /** setter\r\n     * @param pion qui est associé à la case\r\n     */\r\n    fun setPion(pion: Pion?) {\r\n       this.pion=pion\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Case.kt b/src/main/kotlin/projet/echecmartien/modele/Case.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Case.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Case.kt	(date 1654758491705)
@@ -1,23 +1,22 @@
 package projet.echecmartien.modele
 
 
-
 class Case {
-    private var joueur : Joueur? = null
-    private var pion : Pion? = null
+    private var joueur: Joueur? = null
+    private var pion: Pion? = null
 
     /**
      * teste si une case contient un pion ou non
      * @return true si la case ne contient pas un pion, false sinon.
      */
     fun estLibre(): Boolean {
-        return pion==null
+        return pion == null
     }
 
     /** getter
      * @return le joueur associé à la case
      */
-    fun getJoueur():Joueur? {
+    fun getJoueur(): Joueur? {
         return joueur
     }
 
@@ -25,13 +24,13 @@
      * @param joueur qui est associé à la case
      */
     fun setJoueur(joueur: Joueur?) {
-        this.joueur=joueur
+        this.joueur = joueur
     }
 
     /** getter
      * @return le pion associé à la case
      */
-    fun getPion():Pion? {
+    fun getPion(): Pion? {
         return pion
     }
 
@@ -39,7 +38,7 @@
      * @param pion qui est associé à la case
      */
     fun setPion(pion: Pion?) {
-       this.pion=pion
+        this.pion = pion
     }
 
 
Index: src/main/kotlin/projet/echecmartien/modele/Coordonnee.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nclass Coordonnee(x : Int, y : Int) {\r\n    private val x : Int\r\n    private val y : Int\r\n\r\n    init {\r\n        this.x=x\r\n        this.y=y\r\n    }\r\n\r\n    /**\r\n     *@return la coordonnée en x\r\n     */\r\n    fun getX(): Int{\r\n        return x\r\n    }\r\n\r\n\r\n    /**\r\n     *@return la coordonnée en y\r\n     */\r\n    fun getY(): Int{\r\n       return y\r\n    }\r\n\r\n\r\n    override fun toString():String{\r\n       return \"($x,$y)\"\r\n    }\r\n\r\n    override fun equals(other: Any?): Boolean {\r\n        if (other !is Coordonnee)\r\n            return false\r\n        return x==other.x && y==other.y\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/projet/echecmartien/modele/Coordonnee.kt b/src/main/kotlin/projet/echecmartien/modele/Coordonnee.kt
--- a/src/main/kotlin/projet/echecmartien/modele/Coordonnee.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/main/kotlin/projet/echecmartien/modele/Coordonnee.kt	(date 1654758491724)
@@ -1,18 +1,18 @@
 package projet.echecmartien.modele
 
-class Coordonnee(x : Int, y : Int) {
-    private val x : Int
-    private val y : Int
+class Coordonnee(x: Int, y: Int) {
+    private val x: Int
+    private val y: Int
 
     init {
-        this.x=x
-        this.y=y
+        this.x = x
+        this.y = y
     }
 
     /**
      *@return la coordonnée en x
      */
-    fun getX(): Int{
+    fun getX(): Int {
         return x
     }
 
@@ -20,19 +20,19 @@
     /**
      *@return la coordonnée en y
      */
-    fun getY(): Int{
-       return y
+    fun getY(): Int {
+        return y
     }
 
 
-    override fun toString():String{
-       return "($x,$y)"
+    override fun toString(): String {
+        return "($x,$y)"
     }
 
     override fun equals(other: Any?): Boolean {
         if (other !is Coordonnee)
             return false
-        return x==other.x && y==other.y
+        return x == other.x && y == other.y
     }
 
 }
\ No newline at end of file
Index: .idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk8_1_6_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk8_1_6_10.xml b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk8_1_6_10.xml
new file mode 100644
--- /dev/null	(date 1654757073967)
+++ b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk8_1_6_10.xml	(date 1654757073967)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.6.10/kotlin-stdlib-jdk8-1.6.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.6.10/kotlin-stdlib-jdk8-1.6.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.6.10/kotlin-stdlib-jdk8-1.6.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/MoyenPionTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport org.junit.jupiter.api.Test\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\ninternal class MoyenPionTest{\r\n    @Test\r\n    fun getScore() {\r\n        val p = MoyenPion()\r\n        assertEquals(2,p.getScore())\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementExeptionLongeur() {\r\n        val p = MoyenPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(4,4))\r\n        org.junit.jupiter.api.assertThrows<DeplacementExeption> { p.getDeplacement(d) }\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementQuiMarche(){\r\n        val p = MoyenPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,0))\r\n        assertEquals(listOf(Coordonnee(1,0), Coordonnee(2,0)), p.getDeplacement(d))\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/MoyenPionTest.kt b/src/test/kotlin/projet/echecmartien/modele/MoyenPionTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/MoyenPionTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/MoyenPionTest.kt	(date 1654758491632)
@@ -4,25 +4,25 @@
 import org.junit.jupiter.api.Test
 import projet.echecmartien.exeptions.DeplacementExeption
 
-internal class MoyenPionTest{
+internal class MoyenPionTest {
     @Test
     fun getScore() {
         val p = MoyenPion()
-        assertEquals(2,p.getScore())
+        assertEquals(2, p.getScore())
     }
 
     @Test
     fun getDeplacementExeptionLongeur() {
         val p = MoyenPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(4,4))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(4, 4))
         org.junit.jupiter.api.assertThrows<DeplacementExeption> { p.getDeplacement(d) }
     }
 
     @Test
-    fun getDeplacementQuiMarche(){
+    fun getDeplacementQuiMarche() {
         val p = MoyenPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,0))
-        assertEquals(listOf(Coordonnee(1,0), Coordonnee(2,0)), p.getDeplacement(d))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(2, 0))
+        assertEquals(listOf(Coordonnee(1, 0), Coordonnee(2, 0)), p.getDeplacement(d))
     }
 
 }
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/GrandPionTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport org.junit.jupiter.api.Test\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\ninternal class GrandPionTest{\r\n\r\n    @Test\r\n    fun getScore() {\r\n        val p = GrandPion()\r\n        assertEquals(3,p.getScore())\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementExeptionDeplacement() {\r\n        val p = GrandPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(4,2))\r\n        org.junit.jupiter.api.assertThrows<DeplacementExeption> { p.getDeplacement(d) }\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementQuiMarcheHorizontal(){\r\n        val p = GrandPion()\r\n        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,0))\r\n        assertEquals(listOf(Coordonnee(1,0), Coordonnee(2,0)), p.getDeplacement(d))\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementQuiMarcheVertical(){\r\n        val p = GrandPion()\r\n        val d = Deplacement(Coordonnee(0,2), Coordonnee(0,0))\r\n        assertEquals(listOf(Coordonnee(0,1), Coordonnee(0,0)), p.getDeplacement(d))\r\n    }\r\n\r\n    @Test\r\n    fun getDeplacementQuiMarcheDiagonal(){\r\n        val p = GrandPion()\r\n        val d = Deplacement(Coordonnee(0,2), Coordonnee(2,0))\r\n        assertEquals(listOf(Coordonnee(1,1), Coordonnee(2,0)), p.getDeplacement(d))\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/GrandPionTest.kt b/src/test/kotlin/projet/echecmartien/modele/GrandPionTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/GrandPionTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/GrandPionTest.kt	(date 1654758491683)
@@ -4,40 +4,40 @@
 import org.junit.jupiter.api.Test
 import projet.echecmartien.exeptions.DeplacementExeption
 
-internal class GrandPionTest{
+internal class GrandPionTest {
 
     @Test
     fun getScore() {
         val p = GrandPion()
-        assertEquals(3,p.getScore())
+        assertEquals(3, p.getScore())
     }
 
     @Test
     fun getDeplacementExeptionDeplacement() {
         val p = GrandPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(4,2))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(4, 2))
         org.junit.jupiter.api.assertThrows<DeplacementExeption> { p.getDeplacement(d) }
     }
 
     @Test
-    fun getDeplacementQuiMarcheHorizontal(){
+    fun getDeplacementQuiMarcheHorizontal() {
         val p = GrandPion()
-        val d = Deplacement(Coordonnee(0,0), Coordonnee(2,0))
-        assertEquals(listOf(Coordonnee(1,0), Coordonnee(2,0)), p.getDeplacement(d))
+        val d = Deplacement(Coordonnee(0, 0), Coordonnee(2, 0))
+        assertEquals(listOf(Coordonnee(1, 0), Coordonnee(2, 0)), p.getDeplacement(d))
     }
 
     @Test
-    fun getDeplacementQuiMarcheVertical(){
+    fun getDeplacementQuiMarcheVertical() {
         val p = GrandPion()
-        val d = Deplacement(Coordonnee(0,2), Coordonnee(0,0))
-        assertEquals(listOf(Coordonnee(0,1), Coordonnee(0,0)), p.getDeplacement(d))
+        val d = Deplacement(Coordonnee(0, 2), Coordonnee(0, 0))
+        assertEquals(listOf(Coordonnee(0, 1), Coordonnee(0, 0)), p.getDeplacement(d))
     }
 
     @Test
-    fun getDeplacementQuiMarcheDiagonal(){
+    fun getDeplacementQuiMarcheDiagonal() {
         val p = GrandPion()
-        val d = Deplacement(Coordonnee(0,2), Coordonnee(2,0))
-        assertEquals(listOf(Coordonnee(1,1), Coordonnee(2,0)), p.getDeplacement(d))
+        val d = Deplacement(Coordonnee(0, 2), Coordonnee(2, 0))
+        assertEquals(listOf(Coordonnee(1, 1), Coordonnee(2, 0)), p.getDeplacement(d))
     }
 
 }
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_8_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_8_2.xml b/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_8_2.xml
new file mode 100644
--- /dev/null	(date 1654757073983)
+++ b/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_8_2.xml	(date 1654757073983)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-commons:1.8.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_8_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_8_2.xml b/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_8_2.xml
new file mode 100644
--- /dev/null	(date 1654757073983)
+++ b/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_8_2.xml	(date 1654757073983)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_8_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_8_2.xml b/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_8_2.xml
new file mode 100644
--- /dev/null	(date 1654757073967)
+++ b/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_8_2.xml	(date 1654757073967)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-api:5.8.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_controls_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_controls_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_controls_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074014)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_controls_14_0_2_1.xml	(date 1654757074014)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-controls:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_base_win_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_base_win_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_base_win_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074014)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_base_win_14_0_2_1.xml	(date 1654757074014)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-base:win:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_base_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_base_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_base_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757073998)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_base_14_0_2_1.xml	(date 1654757073998)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-base:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/14.0.2.1/javafx-base-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_8_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_8_2.xml b/.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_8_2.xml
new file mode 100644
--- /dev/null	(date 1654757073998)
+++ b/.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_8_2.xml	(date 1654757073998)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-engine:1.8.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_graphics_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_graphics_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_graphics_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074061)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_graphics_14_0_2_1.xml	(date 1654757074061)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-graphics:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_fxml_win_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_fxml_win_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_fxml_win_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074045)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_fxml_win_14_0_2_1.xml	(date 1654757074045)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-fxml:win:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_fxml_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_fxml_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_fxml_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074029)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_fxml_14_0_2_1.xml	(date 1654757074029)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-fxml:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-fxml/14.0.2.1/javafx-fxml-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_controls_win_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_controls_win_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_controls_win_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074029)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_controls_win_14_0_2_1.xml	(date 1654757074029)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-controls:win:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/14.0.2.1/javafx-controls-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1654757074108)
+++ b/.idea/compiler.xml	(date 1654757074108)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="echecMartien" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="echecMartien" target="14" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1654757074092)
+++ b/.idea/modules.xml	(date 1654757074092)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/echecMartien.iml" filepath="$PROJECT_DIR$/echecMartien.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/JoueurTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\n\r\ninternal class JoueurTest {\r\n\r\n    @Test\r\n    fun getPionsCapturesVide() {\r\n        val j = Joueur(\"zzz\")\r\n        assertEquals(setOf<Pion>(), j.getPionsCaptures())\r\n    }\r\n\r\n    @Test\r\n    fun getPionsCapturesPasVide() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(PetitPion())\r\n        j.ajouterPionCaptures(GrandPion())\r\n        j.ajouterPionCaptures(MoyenPion())\r\n        assertEquals(setOf<Pion>(PetitPion(),GrandPion(),MoyenPion()).toList(), j.getPionsCaptures().toList())\r\n    }\r\n\r\n    @Test\r\n    fun ajouterPetitPionCaptures() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(PetitPion())\r\n        assertEquals(listOf(PetitPion()), j.getPionsCaptures().toList())\r\n    }\r\n\r\n    @Test\r\n    fun ajouterMoyenPionCaptures() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(MoyenPion())\r\n        assertEquals(listOf(MoyenPion()), j.getPionsCaptures().toList())\r\n    }\r\n\r\n    @Test\r\n    fun ajouterGrandPionCaptures() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(GrandPion())\r\n        assertEquals(listOf(GrandPion()), j.getPionsCaptures().toList())\r\n    }\r\n\r\n    @Test\r\n    fun getNbPionsCapturesZero() {\r\n        val j = Joueur(\"zzz\")\r\n        assertEquals(0, j.getNbPionsCaptures())\r\n    }\r\n\r\n    @Test\r\n    fun getNbPionsCaptures() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(PetitPion())\r\n        j.ajouterPionCaptures(GrandPion())\r\n        j.ajouterPionCaptures(MoyenPion())\r\n        assertEquals(3, j.getNbPionsCaptures())\r\n    }\r\n\r\n    @Test\r\n    fun getPseudo() {\r\n        val j = Joueur(\"zzz\")\r\n        assertEquals(\"zzz\", j.getPseudo())\r\n    }\r\n\r\n    @Test\r\n    fun calculerScoreZero() {\r\n        val j = Joueur(\"zzz\")\r\n        assertEquals(0, j.calculerScore())\r\n    }\r\n\r\n    @Test\r\n    fun calculerScore() {\r\n        val j = Joueur(\"zzz\")\r\n        j.ajouterPionCaptures(GrandPion())\r\n        j.ajouterPionCaptures(PetitPion())\r\n        j.ajouterPionCaptures(MoyenPion())\r\n        assertEquals(6, j.calculerScore())\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/JoueurTest.kt b/src/test/kotlin/projet/echecmartien/modele/JoueurTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/JoueurTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/JoueurTest.kt	(date 1654758491676)
@@ -18,7 +18,7 @@
         j.ajouterPionCaptures(PetitPion())
         j.ajouterPionCaptures(GrandPion())
         j.ajouterPionCaptures(MoyenPion())
-        assertEquals(setOf<Pion>(PetitPion(),GrandPion(),MoyenPion()).toList(), j.getPionsCaptures().toList())
+        assertEquals(setOf(PetitPion(), GrandPion(), MoyenPion()).toList(), j.getPionsCaptures().toList())
     }
 
     @Test
Index: .idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml b/.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml
new file mode 100644
--- /dev/null	(date 1654757074076)
+++ b/.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml	(date 1654757074076)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.opentest4j:opentest4j:1.2.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_graphics_win_14_0_2_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_14_0_2_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_14_0_2_1.xml
new file mode 100644
--- /dev/null	(date 1654757074076)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_14_0_2_1.xml	(date 1654757074076)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-graphics:win:14.0.2.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/14.0.2.1/javafx-graphics-14.0.2.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/DeplacementTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport org.junit.jupiter.api.assertThrows\r\nimport projet.echecmartien.exeptions.DeplacementExeption\r\n\r\ninternal class DeplacementTest {\r\n\r\n    @Test\r\n    fun getDestination() {\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertEquals(destination,d.getDestination())\r\n    }\r\n\r\n    @Test\r\n    fun getOrigine() {\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertEquals(origine,d.getOrigine())\r\n    }\r\n\r\n    @Test\r\n    fun estHorizontalNull() {\r\n        val origine = Coordonnee(0,0)\r\n        val d = Deplacement(origine, origine)\r\n        assertTrue(d.estHorizontal())\r\n    }\r\n\r\n    @Test\r\n    fun estHorizontalVrai(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,1)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estHorizontal())\r\n    }\r\n\r\n    @Test\r\n    fun estHorizontalFaux(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estHorizontal())\r\n    }\r\n\r\n    @Test\r\n    fun estVerticalNull() {\r\n        val origine = Coordonnee(0,1)\r\n        val d = Deplacement(origine, origine)\r\n        assertTrue(d.estVertical())\r\n    }\r\n\r\n    @Test\r\n    fun estVerticalVrai(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(0,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estVertical())\r\n    }\r\n\r\n    @Test\r\n    fun estVerticalFaux(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estVertical())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNull() {\r\n        val origine = Coordonnee(0,1)\r\n        val d = Deplacement(origine, origine)\r\n        assertTrue(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalVrai1(){\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(3,3)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalVrai2(){\r\n        val origine = Coordonnee(3,0)\r\n        val destination = Coordonnee(0,3)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalVrai3(){\r\n        val origine = Coordonnee(3,3)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalVrai4(){\r\n        val origine = Coordonnee(0,3)\r\n        val destination = Coordonnee(3,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalFaux(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonal())\r\n    }\r\n\r\n    @Test\r\n    fun longueurZero() {\r\n        val origine = Coordonnee(0,1)\r\n        val d = Deplacement(origine, origine)\r\n        assertEquals(0,d.longueur())\r\n    }\r\n\r\n    @Test\r\n    fun longeurHorizontale(){\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(3,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertEquals(3,d.longueur())\r\n    }\r\n\r\n    @Test\r\n    fun longeurVerticale(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(0,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertEquals(5,d.longueur())\r\n    }\r\n\r\n    @Test\r\n    fun longeurDiagonale(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(1,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertEquals(1,d.longueur())\r\n    }\r\n\r\n    @Test\r\n    fun estVerticalPositifVrai() {\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(0,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estVerticalPositif())\r\n    }\r\n\r\n    @Test\r\n    fun estVerticalPositifFaux(){\r\n        val origine = Coordonnee(0,6)\r\n        val destination = Coordonnee(0,5)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estVerticalPositif())\r\n    }\r\n\r\n    @Test\r\n    fun estHorizontalPositifVrai() {\r\n        val origine = Coordonnee(0,2)\r\n        val destination = Coordonnee(3,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estHorizontalPositif())\r\n    }\r\n\r\n    @Test\r\n    fun estHorizontalPositifFaux() {\r\n        val origine = Coordonnee(3,2)\r\n        val destination = Coordonnee(1,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estHorizontalPositif())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXPositifYVrai() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(2,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonalPositifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXPositifYFaux1() {\r\n        val origine = Coordonnee(2,0)\r\n        val destination = Coordonnee(5,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXPositifYFaux2() {\r\n        val origine = Coordonnee(2,2)\r\n        val destination = Coordonnee(4,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXPositifYFaux3() {\r\n        val origine = Coordonnee(4,0)\r\n        val destination = Coordonnee(2,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXPositifYFaux4() {\r\n        val origine = Coordonnee(4,2)\r\n        val destination = Coordonnee(2,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXPositifYVrai() {\r\n        val origine = Coordonnee(2,0)\r\n        val destination = Coordonnee(0,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonalNegatifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXPositifYFaux1() {\r\n        val origine = Coordonnee(2,2)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXPositifYFaux2() {\r\n        val origine = Coordonnee(2,0)\r\n        val destination = Coordonnee(0,3)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXPositifYFaux3() {\r\n        val origine = Coordonnee(0,2)\r\n        val destination = Coordonnee(2,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXPositifYFaux4() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(2,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXPositifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXNegatifYVrai() {\r\n        val origine = Coordonnee(0,2)\r\n        val destination = Coordonnee(2,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonalPositifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXNegatifYFaux1() {\r\n        val origine = Coordonnee(0,3)\r\n        val destination = Coordonnee(2,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXNegatifYFaux2() {\r\n        val origine = Coordonnee(2,2)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXNegatifYFaux3() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(2,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalPositifXNegatifYFaux4() {\r\n        val origine = Coordonnee(2,0)\r\n        val destination = Coordonnee(0,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalPositifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXNegatifYVrai() {\r\n        val origine = Coordonnee(2,2)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertTrue(d.estDiagonalNegatifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXNegatifYFaux1() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(2,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXNegatifYFaux2() {\r\n        val origine = Coordonnee(1,2)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXNegatifYFaux3() {\r\n        val origine = Coordonnee(0,2)\r\n        val destination = Coordonnee(2,0)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun estDiagonalNegatifXNegatifYFaux4() {\r\n        val origine = Coordonnee(2,0)\r\n        val destination = Coordonnee(0,2)\r\n        val d = Deplacement(origine, destination)\r\n        assertFalse(d.estDiagonalNegatifXNegatifY())\r\n    }\r\n\r\n    @Test\r\n    fun getCheminVerticalPositif() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(0,3)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminVertical()\r\n        assertEquals(listOf(Coordonnee(0,1),Coordonnee(0,2),Coordonnee(0,3)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminVerticalNegatif() {\r\n        val origine = Coordonnee(0,3)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminVertical()\r\n        assertEquals(listOf(Coordonnee(0,2),Coordonnee(0,1),Coordonnee(0,0)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminVerticalExeption(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertThrows<DeplacementExeption> { d.getCheminVertical() }\r\n    }\r\n\r\n    @Test\r\n    fun getCheminHorizontalExeption(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertThrows<DeplacementExeption> { d.getCheminHorizontal() }\r\n    }\r\n\r\n    @Test\r\n    fun getCheminHorizontalPositif() {\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(3,0)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminHorizontal()\r\n        assertEquals(listOf(Coordonnee(1,0),Coordonnee(2,0),Coordonnee(3,0)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminHorizontalNegatif() {\r\n        val origine = Coordonnee(3,0)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminHorizontal()\r\n        assertEquals(listOf(Coordonnee(2,0),Coordonnee(1,0),Coordonnee(0,0)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminDiagonalPxPy() { //P = Positif, N = Negatif\r\n        val origine = Coordonnee(0,0)\r\n        val destination = Coordonnee(3,3)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminDiagonal()\r\n        assertEquals(listOf(Coordonnee(1,1),Coordonnee(2,2),Coordonnee(3,3)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminDiagonalPxNy() { //P = Positif, N = Negatif\r\n        val origine = Coordonnee(0,3)\r\n        val destination = Coordonnee(3,0)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminDiagonal()\r\n        assertEquals(listOf(Coordonnee(1,2),Coordonnee(2,1),Coordonnee(3,0)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminDiagonalNxPy() { //P = Positif, N = Negatif\r\n        val origine = Coordonnee(3,0)\r\n        val destination = Coordonnee(0,3)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminDiagonal()\r\n        assertEquals(listOf(Coordonnee(2,1),Coordonnee(1,2),Coordonnee(0,3)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminDiagonalNxNy() { //P = Positif, N = Negatif\r\n        val origine = Coordonnee(3,3)\r\n        val destination = Coordonnee(0,0)\r\n        val d = Deplacement(origine, destination)\r\n        val l = d.getCheminDiagonal()\r\n        assertEquals(listOf(Coordonnee(2,2),Coordonnee(1,1),Coordonnee(0,0)),l)\r\n    }\r\n\r\n    @Test\r\n    fun getCheminDiagonalExeption(){\r\n        val origine = Coordonnee(0,1)\r\n        val destination = Coordonnee(3,6)\r\n        val d = Deplacement(origine, destination)\r\n        assertThrows<DeplacementExeption> { d.getCheminDiagonal() }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/DeplacementTest.kt b/src/test/kotlin/projet/echecmartien/modele/DeplacementTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/DeplacementTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/DeplacementTest.kt	(date 1654758491712)
@@ -10,428 +10,428 @@
 
     @Test
     fun getDestination() {
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
-        assertEquals(destination,d.getDestination())
+        assertEquals(destination, d.getDestination())
     }
 
     @Test
     fun getOrigine() {
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
-        assertEquals(origine,d.getOrigine())
+        assertEquals(origine, d.getOrigine())
     }
 
     @Test
     fun estHorizontalNull() {
-        val origine = Coordonnee(0,0)
+        val origine = Coordonnee(0, 0)
         val d = Deplacement(origine, origine)
         assertTrue(d.estHorizontal())
     }
 
     @Test
-    fun estHorizontalVrai(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,1)
+    fun estHorizontalVrai() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 1)
         val d = Deplacement(origine, destination)
         assertTrue(d.estHorizontal())
     }
 
     @Test
-    fun estHorizontalFaux(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun estHorizontalFaux() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertFalse(d.estHorizontal())
     }
 
     @Test
     fun estVerticalNull() {
-        val origine = Coordonnee(0,1)
+        val origine = Coordonnee(0, 1)
         val d = Deplacement(origine, origine)
         assertTrue(d.estVertical())
     }
 
     @Test
-    fun estVerticalVrai(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(0,6)
+    fun estVerticalVrai() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(0, 6)
         val d = Deplacement(origine, destination)
         assertTrue(d.estVertical())
     }
 
     @Test
-    fun estVerticalFaux(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun estVerticalFaux() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertFalse(d.estVertical())
     }
 
     @Test
     fun estDiagonalNull() {
-        val origine = Coordonnee(0,1)
+        val origine = Coordonnee(0, 1)
         val d = Deplacement(origine, origine)
         assertTrue(d.estDiagonal())
     }
 
     @Test
-    fun estDiagonalVrai1(){
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(3,3)
+    fun estDiagonalVrai1() {
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(3, 3)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonal())
     }
 
     @Test
-    fun estDiagonalVrai2(){
-        val origine = Coordonnee(3,0)
-        val destination = Coordonnee(0,3)
+    fun estDiagonalVrai2() {
+        val origine = Coordonnee(3, 0)
+        val destination = Coordonnee(0, 3)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonal())
     }
 
     @Test
-    fun estDiagonalVrai3(){
-        val origine = Coordonnee(3,3)
-        val destination = Coordonnee(0,0)
+    fun estDiagonalVrai3() {
+        val origine = Coordonnee(3, 3)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonal())
     }
 
     @Test
-    fun estDiagonalVrai4(){
-        val origine = Coordonnee(0,3)
-        val destination = Coordonnee(3,0)
+    fun estDiagonalVrai4() {
+        val origine = Coordonnee(0, 3)
+        val destination = Coordonnee(3, 0)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonal())
     }
 
     @Test
-    fun estDiagonalFaux(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun estDiagonalFaux() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonal())
     }
 
     @Test
     fun longueurZero() {
-        val origine = Coordonnee(0,1)
+        val origine = Coordonnee(0, 1)
         val d = Deplacement(origine, origine)
-        assertEquals(0,d.longueur())
+        assertEquals(0, d.longueur())
     }
 
     @Test
-    fun longeurHorizontale(){
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(3,0)
+    fun longeurHorizontale() {
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(3, 0)
         val d = Deplacement(origine, destination)
-        assertEquals(3,d.longueur())
+        assertEquals(3, d.longueur())
     }
 
     @Test
-    fun longeurVerticale(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(0,6)
+    fun longeurVerticale() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(0, 6)
         val d = Deplacement(origine, destination)
-        assertEquals(5,d.longueur())
+        assertEquals(5, d.longueur())
     }
 
     @Test
-    fun longeurDiagonale(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(1,0)
+    fun longeurDiagonale() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(1, 0)
         val d = Deplacement(origine, destination)
-        assertEquals(1,d.longueur())
+        assertEquals(1, d.longueur())
     }
 
     @Test
     fun estVerticalPositifVrai() {
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(0,6)
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(0, 6)
         val d = Deplacement(origine, destination)
         assertTrue(d.estVerticalPositif())
     }
 
     @Test
-    fun estVerticalPositifFaux(){
-        val origine = Coordonnee(0,6)
-        val destination = Coordonnee(0,5)
+    fun estVerticalPositifFaux() {
+        val origine = Coordonnee(0, 6)
+        val destination = Coordonnee(0, 5)
         val d = Deplacement(origine, destination)
         assertFalse(d.estVerticalPositif())
     }
 
     @Test
     fun estHorizontalPositifVrai() {
-        val origine = Coordonnee(0,2)
-        val destination = Coordonnee(3,2)
+        val origine = Coordonnee(0, 2)
+        val destination = Coordonnee(3, 2)
         val d = Deplacement(origine, destination)
         assertTrue(d.estHorizontalPositif())
     }
 
     @Test
     fun estHorizontalPositifFaux() {
-        val origine = Coordonnee(3,2)
-        val destination = Coordonnee(1,2)
+        val origine = Coordonnee(3, 2)
+        val destination = Coordonnee(1, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estHorizontalPositif())
     }
 
     @Test
     fun estDiagonalPositifXPositifYVrai() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(2,2)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(2, 2)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonalPositifXPositifY())
     }
 
     @Test
     fun estDiagonalPositifXPositifYFaux1() {
-        val origine = Coordonnee(2,0)
-        val destination = Coordonnee(5,2)
+        val origine = Coordonnee(2, 0)
+        val destination = Coordonnee(5, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXPositifY())
     }
 
     @Test
     fun estDiagonalPositifXPositifYFaux2() {
-        val origine = Coordonnee(2,2)
-        val destination = Coordonnee(4,0)
+        val origine = Coordonnee(2, 2)
+        val destination = Coordonnee(4, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXPositifY())
     }
 
     @Test
     fun estDiagonalPositifXPositifYFaux3() {
-        val origine = Coordonnee(4,0)
-        val destination = Coordonnee(2,2)
+        val origine = Coordonnee(4, 0)
+        val destination = Coordonnee(2, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXPositifY())
     }
 
     @Test
     fun estDiagonalPositifXPositifYFaux4() {
-        val origine = Coordonnee(4,2)
-        val destination = Coordonnee(2,0)
+        val origine = Coordonnee(4, 2)
+        val destination = Coordonnee(2, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXPositifY())
     }
 
     @Test
     fun estDiagonalNegatifXPositifYVrai() {
-        val origine = Coordonnee(2,0)
-        val destination = Coordonnee(0,2)
+        val origine = Coordonnee(2, 0)
+        val destination = Coordonnee(0, 2)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonalNegatifXPositifY())
     }
 
     @Test
     fun estDiagonalNegatifXPositifYFaux1() {
-        val origine = Coordonnee(2,2)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(2, 2)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXPositifY())
     }
 
     @Test
     fun estDiagonalNegatifXPositifYFaux2() {
-        val origine = Coordonnee(2,0)
-        val destination = Coordonnee(0,3)
+        val origine = Coordonnee(2, 0)
+        val destination = Coordonnee(0, 3)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXPositifY())
     }
 
     @Test
     fun estDiagonalNegatifXPositifYFaux3() {
-        val origine = Coordonnee(0,2)
-        val destination = Coordonnee(2,0)
+        val origine = Coordonnee(0, 2)
+        val destination = Coordonnee(2, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXPositifY())
     }
 
     @Test
     fun estDiagonalNegatifXPositifYFaux4() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(2,2)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(2, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXPositifY())
     }
 
     @Test
     fun estDiagonalPositifXNegatifYVrai() {
-        val origine = Coordonnee(0,2)
-        val destination = Coordonnee(2,0)
+        val origine = Coordonnee(0, 2)
+        val destination = Coordonnee(2, 0)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonalPositifXNegatifY())
     }
 
     @Test
     fun estDiagonalPositifXNegatifYFaux1() {
-        val origine = Coordonnee(0,3)
-        val destination = Coordonnee(2,0)
+        val origine = Coordonnee(0, 3)
+        val destination = Coordonnee(2, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXNegatifY())
     }
 
     @Test
     fun estDiagonalPositifXNegatifYFaux2() {
-        val origine = Coordonnee(2,2)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(2, 2)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXNegatifY())
     }
 
     @Test
     fun estDiagonalPositifXNegatifYFaux3() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(2,2)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(2, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXNegatifY())
     }
 
     @Test
     fun estDiagonalPositifXNegatifYFaux4() {
-        val origine = Coordonnee(2,0)
-        val destination = Coordonnee(0,2)
+        val origine = Coordonnee(2, 0)
+        val destination = Coordonnee(0, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalPositifXNegatifY())
     }
 
     @Test
     fun estDiagonalNegatifXNegatifYVrai() {
-        val origine = Coordonnee(2,2)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(2, 2)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         assertTrue(d.estDiagonalNegatifXNegatifY())
     }
 
     @Test
     fun estDiagonalNegatifXNegatifYFaux1() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(2,2)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(2, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXNegatifY())
     }
 
     @Test
     fun estDiagonalNegatifXNegatifYFaux2() {
-        val origine = Coordonnee(1,2)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(1, 2)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXNegatifY())
     }
 
     @Test
     fun estDiagonalNegatifXNegatifYFaux3() {
-        val origine = Coordonnee(0,2)
-        val destination = Coordonnee(2,0)
+        val origine = Coordonnee(0, 2)
+        val destination = Coordonnee(2, 0)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXNegatifY())
     }
 
     @Test
     fun estDiagonalNegatifXNegatifYFaux4() {
-        val origine = Coordonnee(2,0)
-        val destination = Coordonnee(0,2)
+        val origine = Coordonnee(2, 0)
+        val destination = Coordonnee(0, 2)
         val d = Deplacement(origine, destination)
         assertFalse(d.estDiagonalNegatifXNegatifY())
     }
 
     @Test
     fun getCheminVerticalPositif() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(0,3)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(0, 3)
         val d = Deplacement(origine, destination)
         val l = d.getCheminVertical()
-        assertEquals(listOf(Coordonnee(0,1),Coordonnee(0,2),Coordonnee(0,3)),l)
+        assertEquals(listOf(Coordonnee(0, 1), Coordonnee(0, 2), Coordonnee(0, 3)), l)
     }
 
     @Test
     fun getCheminVerticalNegatif() {
-        val origine = Coordonnee(0,3)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(0, 3)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         val l = d.getCheminVertical()
-        assertEquals(listOf(Coordonnee(0,2),Coordonnee(0,1),Coordonnee(0,0)),l)
+        assertEquals(listOf(Coordonnee(0, 2), Coordonnee(0, 1), Coordonnee(0, 0)), l)
     }
 
     @Test
-    fun getCheminVerticalExeption(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun getCheminVerticalExeption() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertThrows<DeplacementExeption> { d.getCheminVertical() }
     }
 
     @Test
-    fun getCheminHorizontalExeption(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun getCheminHorizontalExeption() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertThrows<DeplacementExeption> { d.getCheminHorizontal() }
     }
 
     @Test
     fun getCheminHorizontalPositif() {
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(3,0)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(3, 0)
         val d = Deplacement(origine, destination)
         val l = d.getCheminHorizontal()
-        assertEquals(listOf(Coordonnee(1,0),Coordonnee(2,0),Coordonnee(3,0)),l)
+        assertEquals(listOf(Coordonnee(1, 0), Coordonnee(2, 0), Coordonnee(3, 0)), l)
     }
 
     @Test
     fun getCheminHorizontalNegatif() {
-        val origine = Coordonnee(3,0)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(3, 0)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         val l = d.getCheminHorizontal()
-        assertEquals(listOf(Coordonnee(2,0),Coordonnee(1,0),Coordonnee(0,0)),l)
+        assertEquals(listOf(Coordonnee(2, 0), Coordonnee(1, 0), Coordonnee(0, 0)), l)
     }
 
     @Test
     fun getCheminDiagonalPxPy() { //P = Positif, N = Negatif
-        val origine = Coordonnee(0,0)
-        val destination = Coordonnee(3,3)
+        val origine = Coordonnee(0, 0)
+        val destination = Coordonnee(3, 3)
         val d = Deplacement(origine, destination)
         val l = d.getCheminDiagonal()
-        assertEquals(listOf(Coordonnee(1,1),Coordonnee(2,2),Coordonnee(3,3)),l)
+        assertEquals(listOf(Coordonnee(1, 1), Coordonnee(2, 2), Coordonnee(3, 3)), l)
     }
 
     @Test
     fun getCheminDiagonalPxNy() { //P = Positif, N = Negatif
-        val origine = Coordonnee(0,3)
-        val destination = Coordonnee(3,0)
+        val origine = Coordonnee(0, 3)
+        val destination = Coordonnee(3, 0)
         val d = Deplacement(origine, destination)
         val l = d.getCheminDiagonal()
-        assertEquals(listOf(Coordonnee(1,2),Coordonnee(2,1),Coordonnee(3,0)),l)
+        assertEquals(listOf(Coordonnee(1, 2), Coordonnee(2, 1), Coordonnee(3, 0)), l)
     }
 
     @Test
     fun getCheminDiagonalNxPy() { //P = Positif, N = Negatif
-        val origine = Coordonnee(3,0)
-        val destination = Coordonnee(0,3)
+        val origine = Coordonnee(3, 0)
+        val destination = Coordonnee(0, 3)
         val d = Deplacement(origine, destination)
         val l = d.getCheminDiagonal()
-        assertEquals(listOf(Coordonnee(2,1),Coordonnee(1,2),Coordonnee(0,3)),l)
+        assertEquals(listOf(Coordonnee(2, 1), Coordonnee(1, 2), Coordonnee(0, 3)), l)
     }
 
     @Test
     fun getCheminDiagonalNxNy() { //P = Positif, N = Negatif
-        val origine = Coordonnee(3,3)
-        val destination = Coordonnee(0,0)
+        val origine = Coordonnee(3, 3)
+        val destination = Coordonnee(0, 0)
         val d = Deplacement(origine, destination)
         val l = d.getCheminDiagonal()
-        assertEquals(listOf(Coordonnee(2,2),Coordonnee(1,1),Coordonnee(0,0)),l)
+        assertEquals(listOf(Coordonnee(2, 2), Coordonnee(1, 1), Coordonnee(0, 0)), l)
     }
 
     @Test
-    fun getCheminDiagonalExeption(){
-        val origine = Coordonnee(0,1)
-        val destination = Coordonnee(3,6)
+    fun getCheminDiagonalExeption() {
+        val origine = Coordonnee(0, 1)
+        val destination = Coordonnee(3, 6)
         val d = Deplacement(origine, destination)
         assertThrows<DeplacementExeption> { d.getCheminDiagonal() }
     }
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1654757074123)
+++ b/.idea/jarRepositories.xml	(date 1654757074123)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1654757074123)
+++ b/.idea/encodings.xml	(date 1654757074123)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/kotlin" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1654757074108)
+++ b/.idea/misc.xml	(date 1654757074108)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk7_1_6_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk7_1_6_10.xml b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk7_1_6_10.xml
new file mode 100644
--- /dev/null	(date 1654757073951)
+++ b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_jdk7_1_6_10.xml	(date 1654757073951)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.6.10/kotlin-stdlib-jdk7-1.6.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.6.10/kotlin-stdlib-jdk7-1.6.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.6.10/kotlin-stdlib-jdk7-1.6.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/kotlin/projet/echecmartien/modele/JeuTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projet.echecmartien.modele\r\n\r\nimport org.junit.jupiter.api.Test\r\n\r\nimport org.junit.jupiter.api.Assertions.*\r\nimport org.junit.jupiter.api.BeforeEach\r\n\r\ninternal class JeuTest {\r\n\r\n    @Test\r\n    fun getCoordOrigineDeplacement() {\r\n        val j = Jeu()\r\n        j.initialiserPartie(Joueur(\"zzz\"), Joueur(\"kkk\"), 2)\r\n        assertEquals(null, j.getCoordOrigineDeplacement())\r\n        j.setCoordOrigineDeplacement(Coordonnee(2, 5))\r\n        assertEquals(Coordonnee(2, 5), j.getCoordOrigineDeplacement())\r\n    }\r\n\r\n    @Test\r\n    fun getCoordDestinationDeplacement() {\r\n        val j = Jeu()\r\n        j.initialiserPartie(Joueur(\"zzz\"), Joueur(\"kkk\"), 2)\r\n        assertEquals(null, j.getCoordDestinationDeplacement())\r\n        j.setCoordDestinationDeplacement(Coordonnee(2, 5))\r\n        assertEquals(Coordonnee(2, 5), j.getCoordDestinationDeplacement())\r\n    }\r\n\r\n    @Test\r\n    fun setCoordOrigineDeplacement() {\r\n        val j = Jeu()\r\n        j.initialiserPartie(Joueur(\"zzz\"), Joueur(\"kkk\"), 2)\r\n        j.setCoordOrigineDeplacement(Coordonnee(2, 3))\r\n        assertEquals(Coordonnee(2, 3), j.getCoordOrigineDeplacement())\r\n    }\r\n\r\n    @Test\r\n    fun setCoordDestinationDeplacement() {\r\n        val j = Jeu()\r\n        j.initialiserPartie(Joueur(\"zzz\"), Joueur(\"kkk\"), 2)\r\n        j.setCoordDestinationDeplacement(Coordonnee(2, 3))\r\n        assertEquals(Coordonnee(2, 3), j.getCoordDestinationDeplacement())\r\n    }\r\n\r\n    @Test\r\n    fun getJoueurCourant() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 2)\r\n        assertEquals(joueur1, j.getJoueurCourant())\r\n    }\r\n\r\n    @Test\r\n    fun arretPartieLimiteMouvement() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 3)\r\n        j.deplacer(1, 5, 0, 4)\r\n        j.deplacer(2, 2, 3, 3)\r\n        assertFalse(j.arretPartie())\r\n        j.deplacer(0, 4, 1, 5)\r\n        assertTrue(j.arretPartie())\r\n    }\r\n\r\n    @Test\r\n    fun arretPartieJoueur1Vide() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 10)\r\n        j.deplacer(1, 5, 0, 4)\r\n        j.deplacer(2, 2, 3, 3)\r\n\r\n        // On supprimer tous les pions du plateau sauf 2 petits pions, un de chaque côté\r\n        for (colonne in j.getPlateau().getCases().indices){\r\n            for (ligne in j.getPlateau().getCases()[0].indices){\r\n                if (ligne != 3 && ligne != 4)\r\n                    j.getPlateau().getCases()[colonne][ligne].setPion(null)\r\n            }\r\n        }\r\n\r\n        j.deplacer(0, 4, 1, 3)\r\n        assertTrue(j.arretPartie())\r\n    }\r\n\r\n    @Test\r\n    fun arretPartieJoueur2Vide() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 10)\r\n        j.deplacer(1, 5, 0, 4)\r\n        j.deplacer(2, 2, 3, 3)\r\n\r\n        // On supprimer tous les pions du plateau sauf 2 petits pions, un de chaque côté\r\n        for (colonne in j.getPlateau().getCases().indices){\r\n            for (ligne in j.getPlateau().getCases()[0].indices){\r\n                if (ligne != 3 && ligne != 4)\r\n                    j.getPlateau().getCases()[colonne][ligne].setPion(null)\r\n            }\r\n        }\r\n\r\n        j.deplacer(0, 4, 1, 5)\r\n        assertFalse(j.arretPartie())\r\n        j.deplacer(3, 3, 2, 4)\r\n        assertTrue(j.arretPartie())\r\n    }\r\n\r\n    @Test\r\n    fun changeJoueurCourant() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 2)\r\n        assertEquals(joueur1, j.getJoueurCourant())\r\n        j.changeJoueurCourant()\r\n        assertEquals(joueur2, j.getJoueurCourant())\r\n    }\r\n\r\n    @Test\r\n    fun initialiserPartieAppartenanceCaseJoueur() {\r\n        val jeu = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        jeu.initialiserPartie(joueur1, joueur2, 2)\r\n        for (i in 0 until 4){\r\n            for (j in 0 until 8){\r\n                if (j<4) {\r\n                    assertEquals(joueur2, jeu.getPlateau().getCases()[i][j].getJoueur())\r\n                }else{\r\n                    assertEquals(joueur1, jeu.getPlateau().getCases()[i][j].getJoueur())\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @Test\r\n    fun joueurVainqueur1() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 10)\r\n        joueur1.ajouterPionCaptures(PetitPion())\r\n        assertEquals(joueur1, j.joueurVainqueur())\r\n    }\r\n\r\n    @Test\r\n    fun joueurVainqueur2() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 10)\r\n        joueur2.ajouterPionCaptures(GrandPion())\r\n        assertEquals(joueur2, j.joueurVainqueur())\r\n    }\r\n    @Test\r\n    fun joueurVainqueurEgal() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 10)\r\n        joueur2.ajouterPionCaptures(GrandPion())\r\n        joueur1.ajouterPionCaptures(PetitPion())\r\n        joueur1.ajouterPionCaptures(MoyenPion())\r\n        assertNull(j.joueurVainqueur())\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossibleOrigineOnlyPossible() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertTrue(j.deplacementPossible(1,6))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossibleOrigineOnlyPasPossibleJoueur() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(2,2))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossibleOrigineOnlyPasPossiblePionBloque() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(3,7))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossibleOrigineOnlyPasPossiblePasPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(2,4))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPossible() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertTrue(j.deplacementPossible(3,5,3,3,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossiblePasJoueurCourant() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(0,2,0,3,joueur2))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossibleMauvaisCote() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(2,2,3,3,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossiblePionBloque() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(3,7,3,6,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossibleLongueurPetitPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(2,5,0,3,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossibleLongueurMoyenPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(3,5,3,1,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossibleHorizontalPetitPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(1,5,0,5,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossibleVerticalPetitPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        assertFalse(j.deplacementPossible(1,5,1,4,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossiblePionSurLeChemin() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.getPlateau().getCases()[3][6].setPion(null)\r\n        assertFalse(j.deplacementPossible(3,7,3,3,joueur1))\r\n    }\r\n\r\n    @Test\r\n    fun deplacementPossible5ParamsPasPossiblePionArriveDeZone() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.deplacer(3,5,3,3)\r\n        assertFalse(j.deplacementPossible(3,3,3,5,joueur2))\r\n    }\r\n\r\n\r\n    @Test\r\n    fun deplacerSurUnPion() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.deplacer(3,5,2,5)\r\n        assertFalse(j.getPlateau().getCases()[3][5].estLibre())\r\n        assertEquals(PetitPion(),j.getPlateau().getCases()[2][5].getPion())\r\n    }\r\n\r\n    @Test\r\n    fun deplacerMauvaisJoueur() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        println(j)\r\n        j.deplacer(0,2,0,3)\r\n        assertTrue(j.getPlateau().getCases()[0][3].estLibre())\r\n        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][2].getPion())\r\n    }\r\n\r\n    @Test\r\n    fun deplacerVraiCaseLibre() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.deplacer(1,5,0,4)\r\n        assertTrue(j.getPlateau().getCases()[1][5].estLibre())\r\n        assertEquals(PetitPion(),j.getPlateau().getCases()[0][4].getPion())\r\n    }\r\n\r\n\r\n    @Test\r\n    fun deplacerVraiCoupAvecPrise() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.deplacer(1,5,0,4)\r\n        j.deplacer(0,2,0,4)\r\n        assertTrue(j.getPlateau().getCases()[0][2].estLibre())\r\n        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][4].getPion())\r\n    }\r\n\r\n    @Test\r\n    fun deplacerImpossiblePionArriveDeZone() {\r\n        val j = Jeu()\r\n        val joueur1 = Joueur(\"zzz\")\r\n        val joueur2 = Joueur(\"kkk\")\r\n        j.initialiserPartie(joueur1, joueur2, 5)\r\n        j.deplacer(1,5,0,4)\r\n        j.deplacer(0,2,0,4)\r\n        j.deplacer(0,4,0,3)\r\n        assertTrue(j.getPlateau().getCases()[0][3].estLibre())\r\n        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][4].getPion())\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/projet/echecmartien/modele/JeuTest.kt b/src/test/kotlin/projet/echecmartien/modele/JeuTest.kt
--- a/src/test/kotlin/projet/echecmartien/modele/JeuTest.kt	(revision 9075b738516171ebe3ccaca1c849ca25f01a5f42)
+++ b/src/test/kotlin/projet/echecmartien/modele/JeuTest.kt	(date 1654758491731)
@@ -3,7 +3,6 @@
 import org.junit.jupiter.api.Test
 
 import org.junit.jupiter.api.Assertions.*
-import org.junit.jupiter.api.BeforeEach
 
 internal class JeuTest {
 
@@ -73,8 +72,8 @@
         j.deplacer(2, 2, 3, 3)
 
         // On supprimer tous les pions du plateau sauf 2 petits pions, un de chaque côté
-        for (colonne in j.getPlateau().getCases().indices){
-            for (ligne in j.getPlateau().getCases()[0].indices){
+        for (colonne in j.getPlateau().getCases().indices) {
+            for (ligne in j.getPlateau().getCases()[0].indices) {
                 if (ligne != 3 && ligne != 4)
                     j.getPlateau().getCases()[colonne][ligne].setPion(null)
             }
@@ -94,8 +93,8 @@
         j.deplacer(2, 2, 3, 3)
 
         // On supprimer tous les pions du plateau sauf 2 petits pions, un de chaque côté
-        for (colonne in j.getPlateau().getCases().indices){
-            for (ligne in j.getPlateau().getCases()[0].indices){
+        for (colonne in j.getPlateau().getCases().indices) {
+            for (ligne in j.getPlateau().getCases()[0].indices) {
                 if (ligne != 3 && ligne != 4)
                     j.getPlateau().getCases()[colonne][ligne].setPion(null)
             }
@@ -124,11 +123,11 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         jeu.initialiserPartie(joueur1, joueur2, 2)
-        for (i in 0 until 4){
-            for (j in 0 until 8){
-                if (j<4) {
+        for (i in 0 until 4) {
+            for (j in 0 until 8) {
+                if (j < 4) {
                     assertEquals(joueur2, jeu.getPlateau().getCases()[i][j].getJoueur())
-                }else{
+                } else {
                     assertEquals(joueur1, jeu.getPlateau().getCases()[i][j].getJoueur())
                 }
             }
@@ -155,6 +154,7 @@
         joueur2.ajouterPionCaptures(GrandPion())
         assertEquals(joueur2, j.joueurVainqueur())
     }
+
     @Test
     fun joueurVainqueurEgal() {
         val j = Jeu()
@@ -173,7 +173,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertTrue(j.deplacementPossible(1,6))
+        assertTrue(j.deplacementPossible(1, 6))
     }
 
     @Test
@@ -182,7 +182,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(2,2))
+        assertFalse(j.deplacementPossible(2, 2))
     }
 
     @Test
@@ -191,7 +191,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(3,7))
+        assertFalse(j.deplacementPossible(3, 7))
     }
 
     @Test
@@ -200,7 +200,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(2,4))
+        assertFalse(j.deplacementPossible(2, 4))
     }
 
     @Test
@@ -209,7 +209,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertTrue(j.deplacementPossible(3,5,3,3,joueur1))
+        assertTrue(j.deplacementPossible(3, 5, 3, 3, joueur1))
     }
 
     @Test
@@ -218,7 +218,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(0,2,0,3,joueur2))
+        assertFalse(j.deplacementPossible(0, 2, 0, 3, joueur2))
     }
 
     @Test
@@ -227,7 +227,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(2,2,3,3,joueur1))
+        assertFalse(j.deplacementPossible(2, 2, 3, 3, joueur1))
     }
 
     @Test
@@ -236,7 +236,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(3,7,3,6,joueur1))
+        assertFalse(j.deplacementPossible(3, 7, 3, 6, joueur1))
     }
 
     @Test
@@ -245,7 +245,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(2,5,0,3,joueur1))
+        assertFalse(j.deplacementPossible(2, 5, 0, 3, joueur1))
     }
 
     @Test
@@ -254,7 +254,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(3,5,3,1,joueur1))
+        assertFalse(j.deplacementPossible(3, 5, 3, 1, joueur1))
     }
 
     @Test
@@ -263,7 +263,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(1,5,0,5,joueur1))
+        assertFalse(j.deplacementPossible(1, 5, 0, 5, joueur1))
     }
 
     @Test
@@ -272,7 +272,7 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        assertFalse(j.deplacementPossible(1,5,1,4,joueur1))
+        assertFalse(j.deplacementPossible(1, 5, 1, 4, joueur1))
     }
 
     @Test
@@ -282,7 +282,7 @@
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
         j.getPlateau().getCases()[3][6].setPion(null)
-        assertFalse(j.deplacementPossible(3,7,3,3,joueur1))
+        assertFalse(j.deplacementPossible(3, 7, 3, 3, joueur1))
     }
 
     @Test
@@ -291,8 +291,8 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        j.deplacer(3,5,3,3)
-        assertFalse(j.deplacementPossible(3,3,3,5,joueur2))
+        j.deplacer(3, 5, 3, 3)
+        assertFalse(j.deplacementPossible(3, 3, 3, 5, joueur2))
     }
 
 
@@ -302,9 +302,9 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        j.deplacer(3,5,2,5)
+        j.deplacer(3, 5, 2, 5)
         assertFalse(j.getPlateau().getCases()[3][5].estLibre())
-        assertEquals(PetitPion(),j.getPlateau().getCases()[2][5].getPion())
+        assertEquals(PetitPion(), j.getPlateau().getCases()[2][5].getPion())
     }
 
     @Test
@@ -314,9 +314,9 @@
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
         println(j)
-        j.deplacer(0,2,0,3)
+        j.deplacer(0, 2, 0, 3)
         assertTrue(j.getPlateau().getCases()[0][3].estLibre())
-        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][2].getPion())
+        assertEquals(MoyenPion(), j.getPlateau().getCases()[0][2].getPion())
     }
 
     @Test
@@ -325,9 +325,9 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        j.deplacer(1,5,0,4)
+        j.deplacer(1, 5, 0, 4)
         assertTrue(j.getPlateau().getCases()[1][5].estLibre())
-        assertEquals(PetitPion(),j.getPlateau().getCases()[0][4].getPion())
+        assertEquals(PetitPion(), j.getPlateau().getCases()[0][4].getPion())
     }
 
 
@@ -337,10 +337,10 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        j.deplacer(1,5,0,4)
-        j.deplacer(0,2,0,4)
+        j.deplacer(1, 5, 0, 4)
+        j.deplacer(0, 2, 0, 4)
         assertTrue(j.getPlateau().getCases()[0][2].estLibre())
-        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][4].getPion())
+        assertEquals(MoyenPion(), j.getPlateau().getCases()[0][4].getPion())
     }
 
     @Test
@@ -349,11 +349,11 @@
         val joueur1 = Joueur("zzz")
         val joueur2 = Joueur("kkk")
         j.initialiserPartie(joueur1, joueur2, 5)
-        j.deplacer(1,5,0,4)
-        j.deplacer(0,2,0,4)
-        j.deplacer(0,4,0,3)
+        j.deplacer(1, 5, 0, 4)
+        j.deplacer(0, 2, 0, 4)
+        j.deplacer(0, 4, 0, 3)
         assertTrue(j.getPlateau().getCases()[0][3].estLibre())
-        assertEquals(MoyenPion(),j.getPlateau().getCases()[0][4].getPion())
+        assertEquals(MoyenPion(), j.getPlateau().getCases()[0][4].getPion())
     }
 
 }
\ No newline at end of file
Index: .idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_common_1_6_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_common_1_6_10.xml b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_common_1_6_10.xml
new file mode 100644
--- /dev/null	(date 1654757073951)
+++ b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_common_1_6_10.xml	(date 1654757073951)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.jetbrains.kotlin:kotlin-stdlib-common:1.6.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-common/1.6.10/kotlin-stdlib-common-1.6.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-common/1.6.10/kotlin-stdlib-common-1.6.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib-common/1.6.10/kotlin-stdlib-common-1.6.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_1_6_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_1_6_10.xml b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_1_6_10.xml
new file mode 100644
--- /dev/null	(date 1654757073951)
+++ b/.idea/libraries/Maven__org_jetbrains_kotlin_kotlin_stdlib_1_6_10.xml	(date 1654757073951)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.jetbrains.kotlin:kotlin-stdlib:1.6.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/1.6.10/kotlin-stdlib-1.6.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/1.6.10/kotlin-stdlib-1.6.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/kotlin/kotlin-stdlib/1.6.10/kotlin-stdlib-1.6.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
